import{_ as a,o as s,c as l,Q as n}from"./chunks/framework.b6910bb2.js";const y=JSON.parse('{"title":"构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"guide/webpack/构建流程.md","filePath":"guide/webpack/构建流程.md","lastUpdated":1717753108000}'),e={name:"guide/webpack/构建流程.md"},p=n(`<h1 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h1><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><p>webpack 的工作流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li><li>确定入口：根据配置中的 entry 确定入口文件；</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，得到了每个模块被编译后的 <code>最终内容</code> 以及他们之间的 <code>依赖关系图</code>；</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><h2 id="常见的问题" tabindex="-1">常见的问题 <a class="header-anchor" href="#常见的问题" aria-label="Permalink to &quot;常见的问题&quot;">​</a></h2><h3 id="module、chunk、bundle-的区别" tabindex="-1">Module、Chunk、Bundle 的区别 <a class="header-anchor" href="#module、chunk、bundle-的区别" aria-label="Permalink to &quot;Module、Chunk、Bundle 的区别&quot;">​</a></h3><p>module: 模块，一个模块就是一个文件</p><p>chunk: 代码块，一个 chunk 可以由多个模块组合而成</p><p>bundle: webpack 打包出来的文件</p><h3 id="loader-和-plugin" tabindex="-1">Loader 和 Plugin <a class="header-anchor" href="#loader-和-plugin" aria-label="Permalink to &quot;Loader 和 Plugin&quot;">​</a></h3><p>loader 是一个加载器，让 webpack 拥有加载和解析非 JavaScript 文件的能力</p><p>Plugin 是一个插件，是对 webpack 功能的扩展，让 webpack 具有更高的灵活性</p><h3 id="compiler-和-compilation-的区别" tabindex="-1">Compiler 和 Compilation 的区别 <a class="header-anchor" href="#compiler-和-compilation-的区别" aria-label="Permalink to &quot;Compiler 和 Compilation 的区别&quot;">​</a></h3><p><code>Compiler</code> 对象在 webpack 启动时候被实例化，可以访问当前运行的 webpack 配置，包括 entry、output、loader 等配置，它是全局唯一的。</p><p><code>Plugin</code> 的 apply 方法会传入一个 <code>Compiler</code> 对象，通过这个 <code>Compiler</code> 对象可以注册各种钩子函数，执行插件任务，也可以通过该对象获取配置信息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Compiler.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;emit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// emit 是异步 hook, 在生成之前输出到目录之前调用</span></span>
<span class="line"><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Compiler.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;emit&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// emit 是异步 hook, 在生成之前输出到目录之前调用</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span></code></pre></div><p><code>Compilation</code> 对象是 <code>Compiler</code> 用来常见新的编译流程，每当检测到新的文件变化，就会创建新的 compilation。他可以访问所有的模块和依赖关系</p><p>在编译流程中，涉及了 <code>编译</code>、<code>优化</code>、<code>分块</code> 等阶段。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.someHook.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;SomePlugin&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里是异步的</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compilation.hooks.someHook.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;SomePlugin&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里是异步的</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="热更新原理" tabindex="-1">热更新原理 <a class="header-anchor" href="#热更新原理" aria-label="Permalink to &quot;热更新原理&quot;">​</a></h3><h3 id="webpack4-和-webpack5-的区别" tabindex="-1">webpack4 和 webpack5 的区别 <a class="header-anchor" href="#webpack4-和-webpack5-的区别" aria-label="Permalink to &quot;webpack4 和 webpack5 的区别&quot;">​</a></h3><p>1 强化 Tree Shaking</p><ul><li>可以处理 CommonJS 的代码</li></ul><p>2 压缩代码</p><ul><li>内置了 js 的压缩功能 （terser-webpack-plugin）</li></ul><p>3 缓存配置</p><ul><li>webpack4 需要安装 HardSourceWebpackPlugin 插件</li><li>内置了 cache 缓存机制</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&#39;filesystem&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    buildDependencies: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config: [__filename], </span><span style="color:#6A737D;">// 当配置修改时，缓存失效</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  cache: {</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&#39;filesystem&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    buildDependencies: {</span></span>
<span class="line"><span style="color:#24292E;">      config: [__filename], </span><span style="color:#6A737D;">// 当配置修改时，缓存失效</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>4 sideEffects</p><ul><li>webpack4 需要配置 sideEffects: false</li><li>webpack5 可以根据源代码静态分析，自动将模块标记成无副作用。</li></ul><p>5 支持 import 加载异步模块</p><p>6 支持模块联邦</p><h1 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h1><ul><li><a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8&amp;list=LLHK1mTHpwrUeYgF5gu-Kd4g" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=Gc9-7PBqOC8&amp;list=LLHK1mTHpwrUeYgF5gu-Kd4g</a></li><li><a href="https://tsejx.github.io/webpack-guidebook/infra/implementation-principle/workflow" target="_blank" rel="noreferrer">https://tsejx.github.io/webpack-guidebook/infra/implementation-principle/workflow</a></li></ul>`,34),o=[p];function c(t,i,r,d,E,u){return s(),l("div",null,o)}const k=a(e,[["render",c]]);export{y as __pageData,k as default};
