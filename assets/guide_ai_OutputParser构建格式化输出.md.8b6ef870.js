import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/4.43d3c47e.png",m=JSON.parse('{"title":"OutputParser","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ai/OutputParser构建格式化输出.md","filePath":"guide/ai/OutputParser构建格式化输出.md","lastUpdated":1736839319000}'),l={name:"guide/ai/OutputParser构建格式化输出.md"},t=o(`<h1 id="outputparser" tabindex="-1">OutputParser <a class="header-anchor" href="#outputparser" aria-label="Permalink to &quot;OutputParser&quot;">​</a></h1><p>OutputParser是一个用于解析模型输出的工具类，它可以帮助用户将模型输出解析为用户需要的格式。</p><h2 id="string-output-parser" tabindex="-1">String Output Parser <a class="header-anchor" href="#string-output-parser" aria-label="Permalink to &quot;String Output Parser&quot;">​</a></h2><p>StringOutputParser是OutputParser的一个实现类，它可以将模型输出解析为字符串。</p><p>前面的例子中，我们使用了StringOutputParser来解析模型输出，这里就不过多赘述了。</p><h2 id="structuredoutputparser-结构化的输出" tabindex="-1">StructuredOutputParser （结构化的输出） <a class="header-anchor" href="#structuredoutputparser-结构化的输出" aria-label="Permalink to &quot;StructuredOutputParser （结构化的输出）&quot;">​</a></h2><p>StructuredOutputParser是OutputParser的另一个实现类，它可以将模型输出解析为结构化的数据。</p><p>例如，我们可以将模型输出解析为JSON格式的数据，这样我们就可以更方便地处理模型输出。</p><p>下面是一个使用StructuredOutputParser的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StructuredOutputParser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;langchain/output_parsers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StructuredOutputParser.</span><span style="color:#B392F0;">fromNamesAndDescriptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  answer: </span><span style="color:#9ECBFF;">&quot;用户问题的答案&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  evidence: </span><span style="color:#9ECBFF;">&quot;你回答用户问题所依据的答案&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  confidence: </span><span style="color:#9ECBFF;">&quot;问题答案的可信度评分，格式是百分数&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StructuredOutputParser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;langchain/output_parsers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StructuredOutputParser.</span><span style="color:#6F42C1;">fromNamesAndDescriptions</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  answer: </span><span style="color:#032F62;">&quot;用户问题的答案&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  evidence: </span><span style="color:#032F62;">&quot;你回答用户问题所依据的答案&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  confidence: </span><span style="color:#032F62;">&quot;问题答案的可信度评分，格式是百分数&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>定义这个 praser 的时候，我们需要指定我们需要的 Json 输出的 key 和对应的描述。注意这里的描述要写完整，包括你的要求的格式（比如我们这里写的格式是百分数），越清晰 LLM 越能返回给你需要的数值。</p><p>我们通过调用 <code>getFormatInstructions</code> 方法来获取格式化指令：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(parser.</span><span style="color:#B392F0;">getFormatInstructions</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(parser.</span><span style="color:#6F42C1;">getFormatInstructions</span><span style="color:#24292E;">())</span></span></code></pre></div><p>输入结果如下 👇</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">You must format your output </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSON</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">adheres</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;JSON Schema&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instance</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;JSON Schema&quot;</span><span style="color:#E1E4E8;"> is a declarative language that allows you to annotate and validate </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;"> documents.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">For example, the example </span><span style="color:#9ECBFF;">&quot;JSON Schema&quot;</span><span style="color:#E1E4E8;"> instance {{</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;">: {{</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">: {{</span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;a list of test words&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;array&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;items&quot;</span><span style="color:#E1E4E8;">: {{</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">}}}}}}, </span><span style="color:#9ECBFF;">&quot;required&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">]}}}}</span></span>
<span class="line"><span style="color:#E1E4E8;">would match an object </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> one required property, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">. The </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;"> property specifies </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;"> must be an </span><span style="color:#9ECBFF;">&quot;array&quot;</span><span style="color:#E1E4E8;">, and the </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;"> property semantically describes it </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a list of test words&quot;</span><span style="color:#E1E4E8;">. </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">within</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strings</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">Thus, the object {{</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baz&quot;</span><span style="color:#E1E4E8;">]}} is a well</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">formatted instance </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> example </span><span style="color:#9ECBFF;">&quot;JSON Schema&quot;</span><span style="color:#E1E4E8;">. The object {{</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;">: {{</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baz&quot;</span><span style="color:#E1E4E8;">]}}}} is not well</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">formatted.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Your output will be parsed and type</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">checked according to the provided schema instance, so make sure all fields </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> your output match the schema exactly and there are no trailing commas</span><span style="color:#F97583;">!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Here is the </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;"> Schema instance your output must adhere to. Include the enclosing markdown </span><span style="color:#B392F0;">codeblock</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#9ECBFF;">\` \`\`json</span></span>
<span class="line"><span style="color:#9ECBFF;">{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;answer&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;用户问题的答案&quot;},&quot;evidence&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;你回答用户问题所依据的答案&quot;},&quot;confidence&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;问题答案的可信度评分，格式是百分数&quot;}},&quot;required&quot;:[&quot;answer&quot;,&quot;evidence&quot;,&quot;confidence&quot;],&quot;additionalProperties&quot;:false,&quot;$schema&quot;:&quot;http://json-schema.org/draft-07/schema#&quot;}</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\` \`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">You must format your output </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSON</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">that</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adheres</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;JSON Schema&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;JSON Schema&quot;</span><span style="color:#24292E;"> is a declarative language that allows you to annotate and validate </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;"> documents.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">For example, the example </span><span style="color:#032F62;">&quot;JSON Schema&quot;</span><span style="color:#24292E;"> instance {{</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;">: {{</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">: {{</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a list of test words&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;array&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;items&quot;</span><span style="color:#24292E;">: {{</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">}}}}}}, </span><span style="color:#032F62;">&quot;required&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">]}}}}</span></span>
<span class="line"><span style="color:#24292E;">would match an object </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> one required property, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">. The </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;"> property specifies </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> must be an </span><span style="color:#032F62;">&quot;array&quot;</span><span style="color:#24292E;">, and the </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;"> property semantically describes it </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a list of test words&quot;</span><span style="color:#24292E;">. </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">within</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">must</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">be</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strings</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">Thus, the object {{</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">]}} is a well</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">formatted instance </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> example </span><span style="color:#032F62;">&quot;JSON Schema&quot;</span><span style="color:#24292E;">. The object {{</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;">: {{</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">]}}}} is not well</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">formatted.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Your output will be parsed and type</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">checked according to the provided schema instance, so make sure all fields </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> your output match the schema exactly and there are no trailing commas</span><span style="color:#D73A49;">!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Here is the </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;"> Schema instance your output must adhere to. Include the enclosing markdown </span><span style="color:#6F42C1;">codeblock</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#032F62;">\` \`\`json</span></span>
<span class="line"><span style="color:#032F62;">{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;answer&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;用户问题的答案&quot;},&quot;evidence&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;你回答用户问题所依据的答案&quot;},&quot;confidence&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;问题答案的可信度评分，格式是百分数&quot;}},&quot;required&quot;:[&quot;answer&quot;,&quot;evidence&quot;,&quot;confidence&quot;],&quot;additionalProperties&quot;:false,&quot;$schema&quot;:&quot;http://json-schema.org/draft-07/schema#&quot;}</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\` \`</span></span></code></pre></div><p>这里我们可以看到，这个指令首先会告知 LLM 输出的类型。</p><p>其次，会通过 few-shot（一种 prompt 技巧），也就是用示例告诉 LLM 什么是 JSON Schema，什么情况会被解析成功，什么情况不会被解析成功。</p><p>最后，会告知我们的 JSON Schema 是什么，我们的输出必须符合这个 Schema，否则会解析失败。</p><p>通过这样一系列的 prompt，就能保证大模型以指定的格式输出，我们完成 Chain 的其他部分看看效果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StructuredOutputParser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;langchain/output_parsers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ollama </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./utils/ollama-llm.mjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> baidu </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./utils/baidu-llm.mjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> baidu;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StructuredOutputParser.</span><span style="color:#B392F0;">fromNamesAndDescriptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  answer: </span><span style="color:#9ECBFF;">&quot;用户问题的答案&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  evidence: </span><span style="color:#9ECBFF;">&quot;你回答用户问题所依据的答案&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  confidence: </span><span style="color:#9ECBFF;">&quot;问题答案的可信度评分，格式是百分数&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(parser.getFormatInstructions());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PromptTemplate.</span><span style="color:#B392F0;">fromTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;尽可能的用中文回答用户问题 </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{instructions} </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{question}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prompt.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(model).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(parser)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    question: </span><span style="color:#9ECBFF;">&quot;蒙娜丽莎的作者是谁？是什么时候绘制的？&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    instructions: parser.</span><span style="color:#B392F0;">getFormatInstructions</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StructuredOutputParser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;langchain/output_parsers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ollama </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./utils/ollama-llm.mjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> baidu </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./utils/baidu-llm.mjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baidu;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StructuredOutputParser.</span><span style="color:#6F42C1;">fromNamesAndDescriptions</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  answer: </span><span style="color:#032F62;">&quot;用户问题的答案&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  evidence: </span><span style="color:#032F62;">&quot;你回答用户问题所依据的答案&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  confidence: </span><span style="color:#032F62;">&quot;问题答案的可信度评分，格式是百分数&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(parser.getFormatInstructions());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PromptTemplate.</span><span style="color:#6F42C1;">fromTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;尽可能的用中文回答用户问题 </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{instructions} </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{question}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prompt.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(model).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(parser)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    question: </span><span style="color:#032F62;">&quot;蒙娜丽莎的作者是谁？是什么时候绘制的？&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    instructions: parser.</span><span style="color:#6F42C1;">getFormatInstructions</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">                               </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res)</span></span></code></pre></div><p><img src="`+p+`" alt="输出结果"></p><h2 id="list-output-parser" tabindex="-1">List Output Parser <a class="header-anchor" href="#list-output-parser" aria-label="Permalink to &quot;List Output Parser&quot;">​</a></h2><p>控制大模型输出是数组</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { CommaSeparatedListOutputParser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/output_parsers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ollama </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./utils/ollama-llm.mjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> baidu </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./utils/baidu-llm.mjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> baidu;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommaSeparatedListOutputParser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PromptTemplate.</span><span style="color:#B392F0;">fromTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;列出3个 {country} 的著名的互联网公司.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{instructions}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prompt.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(model).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(parser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    country: </span><span style="color:#9ECBFF;">&quot;中国&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    instructions: parser.</span><span style="color:#B392F0;">getFormatInstructions</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res); </span><span style="color:#6A737D;">// eg: [ &#39;百度，阿里巴巴，腾讯。&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { CommaSeparatedListOutputParser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/output_parsers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ollama </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./utils/ollama-llm.mjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> baidu </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./utils/baidu-llm.mjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baidu;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommaSeparatedListOutputParser</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PromptTemplate.</span><span style="color:#6F42C1;">fromTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;列出3个 {country} 的著名的互联网公司.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{instructions}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prompt.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(model).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(parser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    country: </span><span style="color:#032F62;">&quot;中国&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    instructions: parser.</span><span style="color:#6F42C1;">getFormatInstructions</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res); </span><span style="color:#6A737D;">// eg: [ &#39;百度，阿里巴巴，腾讯。&#39; ]</span></span></code></pre></div><h2 id="auto-fix-parser" tabindex="-1">Auto Fix Parser <a class="header-anchor" href="#auto-fix-parser" aria-label="Permalink to &quot;Auto Fix Parser&quot;">​</a></h2><p>当 LLM 返回的格式有问题时，可以通过 Auto Fix Parser 重新校验格式。</p><p>首先，我们需要使用 zod，一个用来验证 js/ts 中类型是否正确的库。先使用 zod 定义一个我们需要的类型，这里我们指定了评分需要是一个数字，并且是 [0, 100] 的数字。</p><p>例如这个例子👇：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Auto Fix Parser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { z } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zod&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// zod 是一个可以验证 js/ts 是否符合类型的库</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StructuredOutputParser, OutputFixingParser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;langchain/output_parsers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ollama </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./utils/ollama-llm.mjs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">schema</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> z.</span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    answer:  z.</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户问题的答案&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    confidence: z.</span><span style="color:#B392F0;">number</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;问题答案的可信度评分，满分 100&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StructuredOutputParser.</span><span style="color:#B392F0;">fromZodSchema</span><span style="color:#E1E4E8;">(schema);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PromptTemplate.</span><span style="color:#B392F0;">fromTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;尽可能的回答用户问题 </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{instructions} </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{question}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ollama;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prompt.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(model).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(parser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    question: </span><span style="color:#9ECBFF;">&quot;蒙娜丽莎的作者是谁？是什么时候绘制的&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    instructions: parser.</span><span style="color:#B392F0;">getFormatInstructions</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wrongOutput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;answer&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;蒙娜丽莎的作者是达芬奇，大约在16世纪初期（1503年至1506年之间）开始绘制。&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;90%&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自动校正</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fixParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OutputFixingParser.</span><span style="color:#B392F0;">fromLLM</span><span style="color:#E1E4E8;">(model, parser);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> fixParser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(wrongOutput));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(output);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Auto Fix Parser</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { z } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zod&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// zod 是一个可以验证 js/ts 是否符合类型的库</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StructuredOutputParser, OutputFixingParser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;langchain/output_parsers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ollama </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./utils/ollama-llm.mjs&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">schema</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> z.</span><span style="color:#6F42C1;">object</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    answer:  z.</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">describe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户问题的答案&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    confidence: z.</span><span style="color:#6F42C1;">number</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">describe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;问题答案的可信度评分，满分 100&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StructuredOutputParser.</span><span style="color:#6F42C1;">fromZodSchema</span><span style="color:#24292E;">(schema);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">prompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PromptTemplate.</span><span style="color:#6F42C1;">fromTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;尽可能的回答用户问题 </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{instructions} </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{question}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">model</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ollama;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prompt.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(model).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(parser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    question: </span><span style="color:#032F62;">&quot;蒙娜丽莎的作者是谁？是什么时候绘制的&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    instructions: parser.</span><span style="color:#6F42C1;">getFormatInstructions</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wrongOutput</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;answer&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;蒙娜丽莎的作者是达芬奇，大约在16世纪初期（1503年至1506年之间）开始绘制。&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sources&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;90%&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自动校正</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fixParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OutputFixingParser.</span><span style="color:#6F42C1;">fromLLM</span><span style="color:#24292E;">(model, parser);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">output</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> fixParser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(wrongOutput));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(output);</span></span></code></pre></div><p>可能会有朋友问，如果我把用户的问题也给 fixParser，这样不就得到一个正确的答案和正确的格式了么？ 在我们的 demo 中当然是可以的，但实际工程中，引导 llm 返回数据的 prompt 可能非常巨大，非常消耗 token，我们使用 fixParser 就是用较少的成本去修复这个输出，来节约重复调用的成本。所以把原文也给 fixParser 的话，就达不到成本节约的目的了。</p><p>在进一步节约成本的背景下，我们是可以用对 GPT4 的错误输出用 GPT3.5 的 fixer 来修复，甚至是用一些开源模型来进行修复，因为在这个场景下，并不需要模型具有太高的质量，通过多模型的协同来降低成本。</p>`,31),e=[t];function r(c,E,y,u,i,F){return n(),a("div",null,e)}const d=s(l,[["render",r]]);export{m as __pageData,d as default};
