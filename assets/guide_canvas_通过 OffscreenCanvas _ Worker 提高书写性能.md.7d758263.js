import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/19.ad6d5c6e.gif",h=JSON.parse('{"title":"通过 OffscreenCanvas + Worker 提高书写性能","description":"","frontmatter":{},"headers":[],"relativePath":"guide/canvas/通过 OffscreenCanvas + Worker 提高书写性能.md","filePath":"guide/canvas/通过 OffscreenCanvas + Worker 提高书写性能.md","lastUpdated":1709524407000}'),o={name:"guide/canvas/通过 OffscreenCanvas + Worker 提高书写性能.md"},e=l(`<h1 id="通过-offscreencanvas-worker-提高书写性能" tabindex="-1">通过 OffscreenCanvas + Worker 提高书写性能 <a class="header-anchor" href="#通过-offscreencanvas-worker-提高书写性能" aria-label="Permalink to &quot;通过 OffscreenCanvas + Worker 提高书写性能&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>上一节我们通过离屏渲染提高了 Canvas 的渲染性能，但是在绘制的过程中，我们会发现，当绘制的图形越来越多时，Canvas 的渲染性能会越来越差，这是因为我们在绘制图形会阻塞主线程，如果主线程中还有其他的任务也会表现出卡顿的效果，Canvas 的渲染性能越来越差。</p><p>这节我们将通过 OffscreenCanvas + Worker 将绘制图形的任务放到 Worker 中进行，避免阻塞主线程，从而提高 Canvas 的渲染性能。</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><p>在 worker 线程中是无法操作 DOM 的，但 OffscreenCanvas 可以在 worker 线程中进行操作，因此我们可以通过 OffscreenCanvas 将绘制图形的任务放到 worker 线程中进行。这样可以减少主线程的任务，从而提高书写性能。</p><h2 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h2><h3 id="创建-offscreencanvas" tabindex="-1">创建 OffscreenCanvas <a class="header-anchor" href="#创建-offscreencanvas" aria-label="Permalink to &quot;创建 OffscreenCanvas&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;draw&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">offScreenCanvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">transferControlToOffscreen</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将 canvas 转换为 offScreenCanvas</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;draw&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">offScreenCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">transferControlToOffscreen</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将 canvas 转换为 offScreenCanvas</span></span></code></pre></div><h3 id="将-offscreencanvas-传递给-worker-线程" tabindex="-1">将 offScreenCanvas 传递给 worker 线程 <a class="header-anchor" href="#将-offscreencanvas-传递给-worker-线程" aria-label="Permalink to &quot;将 offScreenCanvas 传递给 worker 线程&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./worker.js&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个 webWorker</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">offScreenCanvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">transferControlToOffscreen</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将 canvas 转换为 offScreenCanvas</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&#39;init&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    offScreenCanvas,</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: width,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: height,</span></span>
<span class="line"><span style="color:#E1E4E8;">    dpr,</span></span>
<span class="line"><span style="color:#E1E4E8;">}, [offScreenCanvas]); </span><span style="color:#6A737D;">// 将 offScreenCanvas 传递给 webWorker</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.data.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;init&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            init </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 判断是否初始化完毕</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./worker.js&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个 webWorker</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">offScreenCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">transferControlToOffscreen</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将 canvas 转换为 offScreenCanvas</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&#39;init&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    offScreenCanvas,</span></span>
<span class="line"><span style="color:#24292E;">    width: width,</span></span>
<span class="line"><span style="color:#24292E;">    height: height,</span></span>
<span class="line"><span style="color:#24292E;">    dpr,</span></span>
<span class="line"><span style="color:#24292E;">}, [offScreenCanvas]); </span><span style="color:#6A737D;">// 将 offScreenCanvas 传递给 webWorker</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.data.type;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (type) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;init&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            init </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 判断是否初始化完毕</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="通过监听事件获取书写的坐标点传递给-worker-线程-然后在-worker-线程中进行绘制" tabindex="-1">通过监听事件获取书写的坐标点传递给 worker 线程, 然后在 worker 线程中进行绘制 <a class="header-anchor" href="#通过监听事件获取书写的坐标点传递给-worker-线程-然后在-worker-线程中进行绘制" aria-label="Permalink to &quot;通过监听事件获取书写的坐标点传递给 worker 线程, 然后在 worker 线程中进行绘制&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自由画笔的实现思路</span></span>
<span class="line"><span style="color:#6A737D;"> * 1 监听鼠标事件</span></span>
<span class="line"><span style="color:#6A737D;"> * 2 将鼠标移动的轨迹记录下来</span></span>
<span class="line"><span style="color:#6A737D;"> * 3 然后将这些点连接成线</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pointerdown&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">init) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 通过监听鼠标按下事件，来判断是否开始绘制</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addPoint</span><span style="color:#E1E4E8;">(e); </span><span style="color:#6A737D;">// 将鼠标按下的点添加到points数组中</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;pointermove&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e---&gt;throttle&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">start) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 如果没有按下，则不绘制</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addPoint</span><span style="color:#E1E4E8;">(e); </span><span style="color:#6A737D;">// 将鼠标移动的点添加到points数组中</span></span>
<span class="line"><span style="color:#E1E4E8;">        init </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            type: </span><span style="color:#9ECBFF;">&#39;render&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            points,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span><span style="color:#6A737D;">// 将 点 传递给 webWorker</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pointerup&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []; </span><span style="color:#6A737D;">// 绘制完毕后，清空points数组</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* 将鼠标事件的点转化为相对于canvas的坐标上的点</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addPoint</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.clientX;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.clientY;</span></span>
<span class="line"><span style="color:#E1E4E8;">    points.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        x,</span></span>
<span class="line"><span style="color:#E1E4E8;">        y,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自由画笔的实现思路</span></span>
<span class="line"><span style="color:#6A737D;"> * 1 监听鼠标事件</span></span>
<span class="line"><span style="color:#6A737D;"> * 2 将鼠标移动的轨迹记录下来</span></span>
<span class="line"><span style="color:#6A737D;"> * 3 然后将这些点连接成线</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pointerdown&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">init) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 通过监听鼠标按下事件，来判断是否开始绘制</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addPoint</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 将鼠标按下的点添加到points数组中</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;pointermove&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e---&gt;throttle&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">start) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果没有按下，则不绘制</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addPoint</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 将鼠标移动的点添加到points数组中</span></span>
<span class="line"><span style="color:#24292E;">        init </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> worker.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            type: </span><span style="color:#032F62;">&#39;render&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            points,</span></span>
<span class="line"><span style="color:#24292E;">        }); </span><span style="color:#6A737D;">// 将 点 传递给 webWorker</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pointerup&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []; </span><span style="color:#6A737D;">// 绘制完毕后，清空points数组</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* 将鼠标事件的点转化为相对于canvas的坐标上的点</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addPoint</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.clientX;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.clientY;</span></span>
<span class="line"><span style="color:#24292E;">    points.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        x,</span></span>
<span class="line"><span style="color:#24292E;">        y,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="实现效果" tabindex="-1">实现效果 <a class="header-anchor" href="#实现效果" aria-label="Permalink to &quot;实现效果&quot;">​</a></h2><p><img src="`+p+'" alt="初始状态图"></p><p><a href="https://github.com/enson0131/learn/blob/main/Canvas/%E7%99%BD%E6%9D%BF%E7%9B%B8%E5%85%B3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BOffscreenCanvas.html" target="_blank" rel="noreferrer">具体代码</a></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://mdn.github.io/dom-examples/web-workers/offscreen-canvas-worker/" target="_blank" rel="noreferrer">https://mdn.github.io/dom-examples/web-workers/offscreen-canvas-worker/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageBitmap" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/ImageBitmap</a></li></ul>',18),r=[e];function c(t,E,y,i,d,f){return n(),a("div",null,r)}const v=s(o,[["render",c]]);export{h as __pageData,v as default};
