import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.b6910bb2.js";const _=JSON.parse('{"title":"React 是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/React/React是什么.md","filePath":"guide/React/React是什么.md","lastUpdated":1706780294000}'),e={name:"guide/React/React是什么.md"},l=n(`<h1 id="react-是什么" tabindex="-1">React 是什么？ <a class="header-anchor" href="#react-是什么" aria-label="Permalink to &quot;React 是什么？&quot;">​</a></h1><p>React 是一个用于构建用户界面的 JavaScript 库, 通过组件化的方式解决视图层复用的问题。</p><p>它的核心思路是: 声明式、组件化、通用型</p><h2 id="声明式" tabindex="-1">声明式 <a class="header-anchor" href="#声明式" aria-label="Permalink to &quot;声明式&quot;">​</a></h2><p>相比 JQ 的命令式编程: <code>$(body).css(&#39;color&#39;, &#39;red&#39;);</code>, 声明式编程更加直观、便于复用:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">}}&gt;{props.children}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{color: </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">}}&gt;{props.children}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h2><p>可以降低功能之间的耦合、提高功能的内聚性，便于复用</p><h2 id="通用性" tabindex="-1">通用性 <a class="header-anchor" href="#通用性" aria-label="Permalink to &quot;通用性&quot;">​</a></h2><p>虚拟DOM的实现，保证了跨平台和可移植性</p><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><p>没有提供全链路的解决方法，比如 router、数据仓库，需要借助第三方库</p>`,12),p=[l];function t(c,r,i,d,E,y){return a(),o("div",null,p)}const u=s(e,[["render",t]]);export{_ as __pageData,u as default};
