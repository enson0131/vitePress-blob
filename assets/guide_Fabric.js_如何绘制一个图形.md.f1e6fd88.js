import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b6910bb2.js";const F=JSON.parse('{"title":"如何绘制一个图形","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Fabric.js/如何绘制一个图形.md","filePath":"guide/Fabric.js/如何绘制一个图形.md","lastUpdated":1735455947000}'),p={name:"guide/Fabric.js/如何绘制一个图形.md"},o=l(`<h1 id="如何绘制一个图形" tabindex="-1">如何绘制一个图形 <a class="header-anchor" href="#如何绘制一个图形" aria-label="Permalink to &quot;如何绘制一个图形&quot;">​</a></h1><p>上一节中，大致了解了 Fabric 的内部结构，并且知道 Fabric.js 拥有俩层 Canvas。</p><p>上层 Canvas 称之为动态层，用于处理交互相关以及事件绑定</p><p>下层 Canvas 称之为静态层，用于获取数据，通过数据绘制图形</p><p>之前有编写过 React 的同学应该对父子组件的单向数据流有一定的印象，而 Fabric.js 的分层结构设计就很类似于这种单向数据流思想，</p><p>动态层用于获取数据输出到静态层进行渲染。</p><p>在这一节中，我们将以绘制矩形为例，了解 Fabric.js 是如何实现矩形的绘制的？</p><h2 id="fabric-js-是如何绘制矩形的" tabindex="-1">Fabric.js 是如何绘制矩形的 <a class="header-anchor" href="#fabric-js-是如何绘制矩形的" aria-label="Permalink to &quot;Fabric.js 是如何绘制矩形的&quot;">​</a></h2><p>在 Fabric.js 中绘制矩形也非常简单，只需要初始化画布，添加矩形对象即可，代码如下👇:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- html --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;canvas&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">canvas</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- html --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">canvas</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;canvas&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">canvas</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> fabric.</span><span style="color:#B392F0;">Canvas</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;canvas&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">setWidth</span><span style="color:#E1E4E8;">(window.innerWidth);</span></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">setHeight</span><span style="color:#E1E4E8;">(window.innerHeight);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rect</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> fabric.</span><span style="color:#B392F0;">Rect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    left: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//距离左边的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    top: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//距离上边的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">    fill: </span><span style="color:#9ECBFF;">&quot;red&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//填充的颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//矩形宽度</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//矩形高度</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">canvas.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rect);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> fabric.</span><span style="color:#6F42C1;">Canvas</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;canvas&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">setWidth</span><span style="color:#24292E;">(window.innerWidth);</span></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">setHeight</span><span style="color:#24292E;">(window.innerHeight);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rect</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> fabric.</span><span style="color:#6F42C1;">Rect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    left: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//距离左边的距离</span></span>
<span class="line"><span style="color:#24292E;">    top: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//距离上边的距离</span></span>
<span class="line"><span style="color:#24292E;">    fill: </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//填充的颜色</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//矩形宽度</span></span>
<span class="line"><span style="color:#24292E;">    height: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//矩形高度</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">canvas.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rect);</span></span></code></pre></div><p>通过代码可以看到，Fabric.js 通过实例化对象的方式将 Canvas 的绘制逻辑进行的隐藏，使用者只需要关心传入对应的参数即可在 Canvas 中绘制出相对应的元素。</p><h2 id="初始化画布" tabindex="-1">初始化画布 <a class="header-anchor" href="#初始化画布" aria-label="Permalink to &quot;初始化画布&quot;">​</a></h2><p>// new Canvas 做了什么、初始化上层画布、下层画布</p><h2 id="实例化对象" tabindex="-1">实例化对象 <a class="header-anchor" href="#实例化对象" aria-label="Permalink to &quot;实例化对象&quot;">​</a></h2><p>// fabric.Object 是元素的根类型、Rect 继承 fabric.Object，实现了自己的 render 方法 // 在执行 canvas.add 的时候，会将元素 push 到一个数据数组内，进行遍历，通过执行fabric.Object.render 方法, 将元素绘制到底层 Canvas 中</p>`,16),e=[o];function c(t,r,E,i,y,d){return a(),n("div",null,e)}const v=s(p,[["render",c]]);export{F as __pageData,v as default};
