import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/6.9b165bbb.png",b=JSON.parse('{"title":"ES6相关","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javaScript相关/ES6相关.md","filePath":"guide/javaScript相关/ES6相关.md","lastUpdated":1748259204000}'),o={name:"guide/javaScript相关/ES6相关.md"},e=l('<h1 id="es6相关" tabindex="-1">ES6相关 <a class="header-anchor" href="#es6相关" aria-label="Permalink to &quot;ES6相关&quot;">​</a></h1><h2 id="var、let、const-的区别" tabindex="-1">var、let、const 的区别 <a class="header-anchor" href="#var、let、const-的区别" aria-label="Permalink to &quot;var、let、const 的区别&quot;">​</a></h2><p>1 作用域 let、const 存在块级作用域 var 不存在块级作用域</p><p>2 const 常量 定义时赋值</p><p>3 变量提升 let/const 声明的变量需要声明后使用 var 声明的变量可以声明前使用</p><p>4 重复声明 let/const 不能重复声明 var 可以重复声明</p><p>5 暂时性死区 let/const 声明的变量不能在声明前使用</p><p><img src="'+p+`" alt="暂时性死区"></p><h2 id="箭头函数和普通函数的区别" tabindex="-1">箭头函数和普通函数的区别 <a class="header-anchor" href="#箭头函数和普通函数的区别" aria-label="Permalink to &quot;箭头函数和普通函数的区别&quot;">​</a></h2><p>1 箭头函数没有 arguments</p><p>2 箭头函数没有自己的 this this 由定义的所在父级上下文决定</p><p>3 箭头函数继承来的 this 不会改变 call、apply、bind 方法不能改变箭头函数的 this 指向</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;global&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id: </span><span style="color:#9ECBFF;">&#39;obj&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// obj</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.a;</span></span>
<span class="line"><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.b;</span></span>
<span class="line"><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> obj.</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> obj.</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Uncaught TypeError: obj.b is not a constructor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;global&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    id: </span><span style="color:#032F62;">&#39;obj&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// obj</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.a;</span></span>
<span class="line"><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.b;</span></span>
<span class="line"><span style="color:#6F42C1;">b</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Uncaught TypeError: obj.b is not a constructor</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;global&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fun1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fun1</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#E1E4E8;">fun1.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#9ECBFF;">&#39;call&#39;</span><span style="color:#E1E4E8;"> }); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#E1E4E8;">fun1.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#9ECBFF;">&#39;call&#39;</span><span style="color:#E1E4E8;"> }); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#E1E4E8;">fun1.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#9ECBFF;">&#39;call&#39;</span><span style="color:#E1E4E8;"> })(); </span><span style="color:#6A737D;">// global</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;global&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fun1</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#24292E;">fun1.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">({ id: </span><span style="color:#032F62;">&#39;call&#39;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#24292E;">fun1.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">({ id: </span><span style="color:#032F62;">&#39;call&#39;</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// global</span></span>
<span class="line"><span style="color:#24292E;">fun1.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">({ id: </span><span style="color:#032F62;">&#39;call&#39;</span><span style="color:#24292E;"> })(); </span><span style="color:#6A737D;">// global</span></span></code></pre></div><p>4 箭头函数不能作为构造函数 因为没有 prototype 属性</p><p>5 箭头函数不能作为 Generator 函数，不能使用 yield 关键字</p><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>用来代理对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// target 要代理的对象</span></span>
<span class="line"><span style="color:#6A737D;">// handler 代理对象的行为</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onWatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// target 目标对象，property 目标对象的属性，receiver Proxy 实例本身</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`getting \${</span><span style="color:#E1E4E8;">property</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target, property, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`setting \${</span><span style="color:#E1E4E8;">property</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Reflect.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(target, property, value, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(obj, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onWatch</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test.a </span><span style="color:#6A737D;">// getting a!</span></span>
<span class="line"><span style="color:#E1E4E8;">test.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// setting a!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// target 要代理的对象</span></span>
<span class="line"><span style="color:#6A737D;">// handler 代理对象的行为</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onWatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// target 目标对象，property 目标对象的属性，receiver Proxy 实例本身</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">property</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`getting \${</span><span style="color:#24292E;">property</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Reflect.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(target, property, receiver);</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">property</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`setting \${</span><span style="color:#24292E;">property</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Reflect.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(target, property, value, receiver);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(obj, handler);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onWatch</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test.a </span><span style="color:#6A737D;">// getting a!</span></span>
<span class="line"><span style="color:#24292E;">test.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// setting a!</span></span></code></pre></div>`,19),t=[e];function c(r,E,y,i,F,d){return n(),a("div",null,t)}const A=s(o,[["render",c]]);export{b as __pageData,A as default};
