import{_ as a,o as e,c as r,Q as t}from"./chunks/framework.b6910bb2.js";const i="/vitePress-blob/assets/1.1634239e.png",f=JSON.parse('{"title":"内部设计","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Fabric.js/内部设计.md","filePath":"guide/Fabric.js/内部设计.md","lastUpdated":1734662624000}'),s={name:"guide/Fabric.js/内部设计.md"},o=t('<h1 id="内部设计" tabindex="-1">内部设计 <a class="header-anchor" href="#内部设计" aria-label="Permalink to &quot;内部设计&quot;">​</a></h1><h2 id="使用场景上看" tabindex="-1">使用场景上看 <a class="header-anchor" href="#使用场景上看" aria-label="Permalink to &quot;使用场景上看&quot;">​</a></h2><p>从使用场景上看，Fabric.js 通过对象的形式来创建图形 （源码上也充满了面向对象设计的身影）</p><p>对于使用者而言，不需要关心底层 Canvas 是如何实现的，只需要关心如何创建这些图像对象即可。</p><h2 id="canvas-开发原理" tabindex="-1">Canvas 开发原理 <a class="header-anchor" href="#canvas-开发原理" aria-label="Permalink to &quot;Canvas 开发原理&quot;">​</a></h2><p>Canvas 开发的本质其实很简单，可以想象下这种少儿画板：</p><p><img src="'+i+'" alt="初始状态图"></p><p>Canvas 的绘制其实就是在不断在画布上绘制图形，然后擦出的过程。</p><h2 id="fabric-js-源码解析" tabindex="-1">Fabric.js 源码解析 <a class="header-anchor" href="#fabric-js-源码解析" aria-label="Permalink to &quot;Fabric.js 源码解析&quot;">​</a></h2><h2 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h2><h2 id="模块结构图" tabindex="-1">模块结构图 <a class="header-anchor" href="#模块结构图" aria-label="Permalink to &quot;模块结构图&quot;">​</a></h2><p>// 这里是一张设计图</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://keelii.com/2021/05/09/fabricjs-internals" target="_blank" rel="noreferrer">https://keelii.com/2021/05/09/fabricjs-internals</a></li></ul>',14),n=[o];function l(c,h,d,_,p,b){return e(),r("div",null,n)}const m=a(s,[["render",l]]);export{f as __pageData,m as default};
