import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/3.d5809f49.png",b=JSON.parse('{"title":"2 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"guide/javaScript相关/数据类型.md","filePath":"guide/javaScript相关/数据类型.md","lastUpdated":1705660482000}'),o={name:"guide/javaScript相关/数据类型.md"},e=l(`<h1 id="_2-数据类型" tabindex="-1">2 数据类型 <a class="header-anchor" href="#_2-数据类型" aria-label="Permalink to &quot;2 数据类型&quot;">​</a></h1><h2 id="_2-1-数据类型" tabindex="-1">2.1 数据类型 <a class="header-anchor" href="#_2-1-数据类型" aria-label="Permalink to &quot;2.1 数据类型&quot;">​</a></h2><p>一共有 7 种基本数据类型</p><ul><li>1 Number - 基于 IEEE 754 标准实现，采用双精度 64 位二进制格式, -(2 ^ 63 - 1) ~ 2 ^ 63 - 1</li><li>2 Boolean - 只有 true 和 false</li><li>3 Undefined - 没有定义的值</li><li>4 Null - 空值</li><li>5 String - 字符串</li><li>6 Symbol - 唯一不可修改的值</li><li>7 BigInt - 大整数类型</li></ul><p>一种引用类型</p><ul><li>Object - 引用类型，存储在堆中</li></ul><h2 id="_2-2-类型检测" tabindex="-1">2.2 类型检测 <a class="header-anchor" href="#_2-2-类型检测" aria-label="Permalink to &quot;2.2 类型检测&quot;">​</a></h2><h3 id="_2-2-1-typeof" tabindex="-1">2.2.1 typeof <a class="header-anchor" href="#_2-2-1-typeof" aria-label="Permalink to &quot;2.2.1 typeof&quot;">​</a></h3><p>判断基础数据类型，除了 null 也可以判断 function</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {}) </span><span style="color:#6A737D;">// function</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}) </span><span style="color:#6A737D;">// function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {}) </span><span style="color:#6A737D;">// function</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}) </span><span style="color:#6A737D;">// function</span></span></code></pre></div><p>但数组、对象、null 都会返回 object</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> [] </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// object</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> [] </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> {} </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// object</span></span></code></pre></div><h3 id="_2-2-2-instanceof" tabindex="-1">2.2.2 instanceof <a class="header-anchor" href="#_2-2-2-instanceof" aria-label="Permalink to &quot;2.2.2 instanceof&quot;">​</a></h3><p>判断引用类型</p><p>原理是判断其原型链上是否有该构造函数的原型</p><p><img src="`+p+`" alt="原型三角形"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">Func</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取实例的原型对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> objPrototype </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取构造函数的原型对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">funcPrototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Func</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (objPrototype) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (objPrototype </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> funcPrototype) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    objPrototype </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(objPrototype);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_instanceof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(), Object)); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_instanceof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">Func</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取实例的原型对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> objPrototype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取构造函数的原型对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">funcPrototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Func</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (objPrototype) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (objPrototype </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> funcPrototype) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    objPrototype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(objPrototype);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_instanceof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(), Object)); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="_2-2-3-constructor" tabindex="-1">2.2.3 constructor <a class="header-anchor" href="#_2-2-3-constructor" aria-label="Permalink to &quot;2.2.3 constructor&quot;">​</a></h3><p>实例对象可以通过 constructor 属性找到它的构造函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">({}).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Object </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">[].</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Array </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">({}).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Object </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">[].</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Array </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>这种方法不太准确，因为可以修改原型对象</p><h3 id="_2-2-4-object-prototype-tostring-call" tabindex="-1">2.2.4 Object.prototype.toString.call() <a class="header-anchor" href="#_2-2-4-object-prototype-tostring-call" aria-label="Permalink to &quot;2.2.4 Object.prototype.toString.call()&quot;">​</a></h3><p>可以判断所有类型</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;[object Null]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">({}); </span><span style="color:#6A737D;">// &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([]); </span><span style="color:#6A737D;">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;[object String]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;[object Boolean]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;[object Undefined]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;[object Symbol]&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// &#39;[object BigInt]&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;[object Null]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">([]); </span><span style="color:#6A737D;">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;[object String]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;[object Boolean]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;[object Undefined]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;[object Symbol]&#39;</span></span>
<span class="line"><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// &#39;[object BigInt]&#39;</span></span></code></pre></div><h3 id="_2-2-5-如何判断是否是数组" tabindex="-1">2.2.5 如何判断是否是数组 <a class="header-anchor" href="#_2-2-5-如何判断是否是数组" aria-label="Permalink to &quot;2.2.5 如何判断是否是数组&quot;">​</a></h3><p>常见的有:</p><ul><li>Array.isArray()</li><li>instanceof</li><li>Object.prototype.toString.call()</li></ul><h3 id="_2-2-6-如何判断对象是否属于某个类" tabindex="-1">2.2.6 如何判断对象是否属于某个类 <a class="header-anchor" href="#_2-2-6-如何判断对象是否属于某个类" aria-label="Permalink to &quot;2.2.6 如何判断对象是否属于某个类&quot;">​</a></h3><ul><li>instanceof</li><li>constructor</li><li>Object.prototype.toString.call()</li></ul><h2 id="_2-3-类型转化" tabindex="-1">2.3 类型转化 <a class="header-anchor" href="#_2-3-类型转化" aria-label="Permalink to &quot;2.3 类型转化&quot;">​</a></h2><h3 id="_2-3-1-布尔类型" tabindex="-1">2.3.1 布尔类型 <a class="header-anchor" href="#_2-3-1-布尔类型" aria-label="Permalink to &quot;2.3.1 布尔类型&quot;">​</a></h3><p>在条件判断中，除了 <code>undefined</code>、<code>null</code>、<code>false</code>、<code>NaN</code>、<code>&#39;&#39;</code>、<code>0</code>、<code>-0</code>、<code>+0</code> 会被转化为 <code>false</code>，其他都会被转化为 <code>true</code></p><p>这里有个特殊的点</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true, 因为都会被转化为 false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true, 因为都会被转化为 false</span></span></code></pre></div><h3 id="_2-3-2-隐式类型转化" tabindex="-1">2.3.2 隐式类型转化 <a class="header-anchor" href="#_2-3-2-隐式类型转化" aria-label="Permalink to &quot;2.3.2 隐式类型转化&quot;">​</a></h3><p>JavaScript 的每个值都隐含的自带了 ToPrimitive 方法，用来将值进行隐式转化成基本类型值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    [Symbol.toPrimitive]() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    [Symbol.toPrimitive]() {</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>ToPrimitive 方法会优先调用 Symbol.toPrimitive 方法，如果没有，再调用 valueOf 方法，如果还没有，再调用 toString 方法 在没有 ToPrimitive 情况下, 转数字先调用 valueOf 方法，转字符串先调用 toString 方法</p><h3 id="_2-3-3-基本类型在不同操作符下的转化规则" tabindex="-1">2.3.3 基本类型在不同操作符下的转化规则 <a class="header-anchor" href="#_2-3-3-基本类型在不同操作符下的转化规则" aria-label="Permalink to &quot;2.3.3 基本类型在不同操作符下的转化规则&quot;">​</a></h3><ul><li>1 +操作符: +操作符的俩边有一个是 string 类型时，俩边隐式转化成 string 类型，其他情况都转化成 number 类型</li><li>2 其他情况转化为数字在操作</li></ul><table><thead><tr><th style="text-align:center;">原始值</th><th style="text-align:center;">转化目标</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">number</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">除了 0、-0、NaN 都为 true</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">除了空串都为 true</td></tr><tr><td style="text-align:center;">undefined、null</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">引用类型</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">number</td><td style="text-align:center;">字符串</td><td style="text-align:center;">6 -&gt; &#39;6&#39;</td></tr><tr><td style="text-align:center;">数组</td><td style="text-align:center;">字符串</td><td style="text-align:center;">[1, 2] -&gt; &#39;1, 2&#39; 每个元素都进行转字符串操作</td></tr><tr><td style="text-align:center;">对象</td><td style="text-align:center;">字符串</td><td style="text-align:center;">&#39;[object, Object]&#39;</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">数字</td><td style="text-align:center;">&#39;1&#39; -&gt; 1 &#39;a&#39; -&gt; Nam</td></tr><tr><td style="text-align:center;">数组</td><td style="text-align:center;">数字</td><td style="text-align:center;">空数组为0，存在一个元素且为数字转数字，其他情况为 NaN</td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">数字</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">除数组以外的引用类型</td><td style="text-align:center;">数字</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">Symbol</td><td style="text-align:center;">数字</td><td style="text-align:center;">报错</td></tr></tbody></table><p>转数字的特殊场景</p><ul><li><strong>undefined转数字: NaN</strong></li><li><strong>null转数字: 0</strong></li><li><strong>false转数字: 0</strong></li><li><strong>[]转数字: 0</strong></li></ul><h2 id="_2-4-常见的问题" tabindex="-1">2.4 常见的问题 <a class="header-anchor" href="#_2-4-常见的问题" aria-label="Permalink to &quot;2.4 常见的问题&quot;">​</a></h2><h3 id="_1-栈和堆有什么区别" tabindex="-1">1 栈和堆有什么区别？ <a class="header-anchor" href="#_1-栈和堆有什么区别" aria-label="Permalink to &quot;1 栈和堆有什么区别？&quot;">​</a></h3><p>1 从数据结构的角度上看 栈是一个先进后出的数据结构 堆是一个特别的完全二叉树</p><p>2 从存储的角度上看 栈存储基本类型 堆存储引用类型</p><p>3 从垃圾回收的角度上看</p><ul><li>栈 采用 ESP 指针，例如当一个函数调用时，该函数的上下文被压入调用栈中，此时 ESP 指针指向该上下文，当函数执行完后，ESP指针下移，函数上下文弹出调用栈</li><li>堆分成新生代和旧生代</li><li>新生代采用 GC 算法，将新生代分成俩个区域，活动对象区域和空闲区域，对于一些占用内存较小的对象，会被分配到活动对象区域，当活动对象区域充满时，会进行一次 GC 算法，将存活的对象移入空闲区域并进行一次碎片内存整理后，将空闲区域和活动对象区域进行互换，等待下一次的垃圾回收的执行（俩次回收都还存活的对象，进入到老生区）</li><li>旧生代采用标记清除 + 标记整理算法，会循环查找堆内存空间的对象是否被引用，如果没有，则标记清除，清除后会标记整理算法将碎片空间进行整理</li></ul><h3 id="_2-什么是-javascript-中的包装类型" tabindex="-1">2 什么是 JavaScript 中的包装类型 <a class="header-anchor" href="#_2-什么是-javascript-中的包装类型" aria-label="Permalink to &quot;2 什么是 JavaScript 中的包装类型&quot;">​</a></h3><p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了方便操作基本类型的值，当调用基本类型的属性和方法时，JavaScript 会隐式地将基本类型的值转化为对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">a.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &quot;ABC&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &quot;ABC&quot;</span></span></code></pre></div><h3 id="_3-undefined-和-null-的区别" tabindex="-1">3 undefined 和 null 的区别 <a class="header-anchor" href="#_3-undefined-和-null-的区别" aria-label="Permalink to &quot;3 undefined 和 null 的区别&quot;">​</a></h3><p>undefined 表示未定义，一般变量声明了但还没有定义的时候返回 undefined null 表示空值，常用在对象初始化的场景</p><p>区别如下:</p><ul><li>typeof null 返回的是 ‘object’, 因为在早期 javaScript 设计时，类型通过 1～3位标识进行存储，对象和null一样都是 000</li><li>typeof undefined 返回的是 ‘undefined’</li><li>undefined 不是保留字，可以被赋值，通常我们会用 void 0 表示 undefined，null 是保留字，不能被赋值</li></ul><h3 id="_4-isnan-和-number-isnan-的区别" tabindex="-1">4 isNaN 和 Number.isNaN 的区别 <a class="header-anchor" href="#_4-isnan-和-number-isnan-的区别" aria-label="Permalink to &quot;4 isNaN 和 Number.isNaN 的区别&quot;">​</a></h3><ul><li>isNaN 不会判断是否为数字，会先将参数转化为数字，再判断是否为 NaN</li><li>Number.isNaN 会判断是否是数字，是数字后才会判断是否是 NaN</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div>`,59),t=[e];function c(r,y,E,i,d,u){return a(),n("div",null,t)}const g=s(o,[["render",c]]);export{b as __pageData,g as default};
