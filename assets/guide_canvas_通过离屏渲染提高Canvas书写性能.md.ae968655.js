import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/12.31e4f330.gif",D=JSON.parse('{"title":"通过离屏渲染提高 Canvas 书写性能","description":"","frontmatter":{},"headers":[],"relativePath":"guide/canvas/通过离屏渲染提高Canvas书写性能.md","filePath":"guide/canvas/通过离屏渲染提高Canvas书写性能.md","lastUpdated":1706754379000}'),o={name:"guide/canvas/通过离屏渲染提高Canvas书写性能.md"},e=l(`<h1 id="通过离屏渲染提高-canvas-书写性能" tabindex="-1">通过离屏渲染提高 Canvas 书写性能 <a class="header-anchor" href="#通过离屏渲染提高-canvas-书写性能" aria-label="Permalink to &quot;通过离屏渲染提高 Canvas 书写性能&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>前面我们通过上下分层的方式，优化了 Canvas 的书写性能，接下来我们通过离屏渲染的方式，进一步优化 Canvas 的书写性能。</p><h2 id="基本思路" tabindex="-1">基本思路 <a class="header-anchor" href="#基本思路" aria-label="Permalink to &quot;基本思路&quot;">​</a></h2><p>在书写的过程中，每绘制一笔都需要不断地调用 Canvas 的 API，重新渲染整个 Canvas，这样就会导致性能的浪费。 而离屏渲染则是将 绘制内容存储到离屏的 Canvas 中，相当于一个缓冲区，然后将需要绘制的画面在离屏的 Canvas 缓冲好，最后将离屏的 Canvas 转化成图片，渲染到屏幕上，这样就可以达到优化性能的目的。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="创建离屏-canvas" tabindex="-1">创建离屏 Canvas <a class="header-anchor" href="#创建离屏-canvas" aria-label="Permalink to &quot;创建离屏 Canvas&quot;">​</a></h3><p>思路如下: 基于上一节的基础，我们改写 render 函数，如果是离屏渲染的话，将绘制的内容存储到离屏的 Canvas 中，然后将离屏的 Canvas 缓存起来，下次绘制的时候，如果命中缓存的话，就直接使用缓存的 Canvas，从而达到优化性能的目的。</p><p>操作如下:</p><ul><li>1 在执行 render 函数之前，先判断是否存在缓存的 Canvas，如果存在的话，就直接使用缓存的 Canvas</li><li>2 如果命中缓存，使用离屏 Canvas 转化成图片进行绘制</li><li>3 如果不存在缓存的 Canvas，就创建一个离屏的 Canvas，然后将绘制的内容存储到离屏的 Canvas 中，最后将离屏的 Canvas 缓存起来</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">elementWithCanvasCache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WeakMap</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 用于存储离屏 Canvas 的缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateOffScreenCanvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 避免笔记被 Canvas </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;canvas&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个离屏 Canvas</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctxContent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO 绘制的内容存储</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将离屏 Canvas 缓存起来</span></span>
<span class="line"><span style="color:#E1E4E8;">            elementWithCanvasCache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(points, {</span></span>
<span class="line"><span style="color:#E1E4E8;">                canvas,</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> canvas;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 绘制函数</span></span>
<span class="line"><span style="color:#6A737D;">         * @param {*} ctx - canvas 尺寸</span></span>
<span class="line"><span style="color:#6A737D;">         * @param {*} points - 鼠标移动的点集</span></span>
<span class="line"><span style="color:#6A737D;">         * @return 返回一个 canvas 元素</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isOffScreen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">              判断是否存在缓存元素，存在的话使用缓存元素，绘制</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isOffScreen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> elementWithCanvasCache.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(points)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elementWithCanvasCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> dpr, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> dpr);</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">drawImage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    canvas,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    x,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    y,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    canvas.width,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    canvas.height</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`命中了🎯\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.strokeStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.lineWidth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条宽度</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.lineJoin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;round&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条连接处的样式</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.lineCap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;round&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条末端的样式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">            beginPath() 是 Canvas 2D API 中的一个方法，用于开始一个新的路径。当你想创建一个新的路径时，你需要调用这个方法。</span></span>
<span class="line"><span style="color:#6A737D;">            例如，你可能会这样使用它：</span></span>
<span class="line"><span style="color:#6A737D;">                context.beginPath();</span></span>
<span class="line"><span style="color:#6A737D;">                context.moveTo(50, 50);</span></span>
<span class="line"><span style="color:#6A737D;">                context.lineTo(200, 50);</span></span>
<span class="line"><span style="color:#6A737D;">                context.stroke();</span></span>
<span class="line"><span style="color:#6A737D;">                在这个例子中，beginPath() 开始一个新的路径，moveTo(50, 50) 将路径的起点移动到 (50, 50)，lineTo(200, 50) 添加一条从当前位置到 (200, 50) 的线，</span></span>
<span class="line"><span style="color:#6A737D;">                最后 stroke() 方法绘制出路径。</span></span>
<span class="line"><span style="color:#6A737D;">                其中 context 是你的 canvas 上下文。</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.</span><span style="color:#B392F0;">beginPath</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 开始绘制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(points[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].x, points[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].y); </span><span style="color:#6A737D;">// 将画笔移动到起始点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> points.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 取终点，将上一个点作为控制点，平滑过渡</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (points[i].x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> points[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].x) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (points[i].y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> points[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].y) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx.</span><span style="color:#B392F0;">quadraticCurveTo</span><span style="color:#E1E4E8;">(points[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].x, points[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].y, cx, cy);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            ctx.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 绘制路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isOffScreen) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">generateOffScreenCanvas</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">elementWithCanvasCache</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakMap</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 用于存储离屏 Canvas 的缓存</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateOffScreenCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">points</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">padding</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 避免笔记被 Canvas </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;canvas&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个离屏 Canvas</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctxContent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2d&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO 绘制的内容存储</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将离屏 Canvas 缓存起来</span></span>
<span class="line"><span style="color:#24292E;">            elementWithCanvasCache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(points, {</span></span>
<span class="line"><span style="color:#24292E;">                canvas,</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> canvas;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 绘制函数</span></span>
<span class="line"><span style="color:#6A737D;">         * @param {*} ctx - canvas 尺寸</span></span>
<span class="line"><span style="color:#6A737D;">         * @param {*} points - 鼠标移动的点集</span></span>
<span class="line"><span style="color:#6A737D;">         * @return 返回一个 canvas 元素</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">points</span><span style="color:#24292E;">, </span><span style="color:#E36209;">isOffScreen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">              判断是否存在缓存元素，存在的话使用缓存元素，绘制</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isOffScreen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> elementWithCanvasCache.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(points)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">width</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">height</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementWithCanvasCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">scale</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> dpr, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> dpr);</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">drawImage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    canvas,</span></span>
<span class="line"><span style="color:#24292E;">                    x,</span></span>
<span class="line"><span style="color:#24292E;">                    y,</span></span>
<span class="line"><span style="color:#24292E;">                    canvas.width,</span></span>
<span class="line"><span style="color:#24292E;">                    canvas.height</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">restore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`命中了🎯\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ctx.strokeStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条颜色</span></span>
<span class="line"><span style="color:#24292E;">            ctx.lineWidth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条宽度</span></span>
<span class="line"><span style="color:#24292E;">            ctx.lineJoin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;round&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条连接处的样式</span></span>
<span class="line"><span style="color:#24292E;">            ctx.lineCap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;round&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条末端的样式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">            beginPath() 是 Canvas 2D API 中的一个方法，用于开始一个新的路径。当你想创建一个新的路径时，你需要调用这个方法。</span></span>
<span class="line"><span style="color:#6A737D;">            例如，你可能会这样使用它：</span></span>
<span class="line"><span style="color:#6A737D;">                context.beginPath();</span></span>
<span class="line"><span style="color:#6A737D;">                context.moveTo(50, 50);</span></span>
<span class="line"><span style="color:#6A737D;">                context.lineTo(200, 50);</span></span>
<span class="line"><span style="color:#6A737D;">                context.stroke();</span></span>
<span class="line"><span style="color:#6A737D;">                在这个例子中，beginPath() 开始一个新的路径，moveTo(50, 50) 将路径的起点移动到 (50, 50)，lineTo(200, 50) 添加一条从当前位置到 (200, 50) 的线，</span></span>
<span class="line"><span style="color:#6A737D;">                最后 stroke() 方法绘制出路径。</span></span>
<span class="line"><span style="color:#6A737D;">                其中 context 是你的 canvas 上下文。</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#24292E;">            ctx.</span><span style="color:#6F42C1;">beginPath</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 开始绘制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ctx.</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(points[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].x, points[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].y); </span><span style="color:#6A737D;">// 将画笔移动到起始点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> points.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 取终点，将上一个点作为控制点，平滑过渡</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (points[i].x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> points[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].x) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (points[i].y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> points[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].y) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                ctx.</span><span style="color:#6F42C1;">quadraticCurveTo</span><span style="color:#24292E;">(points[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].x, points[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].y, cx, cy);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ctx.</span><span style="color:#6F42C1;">stroke</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 绘制路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isOffScreen) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">generateOffScreenCanvas</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="数据的切换" tabindex="-1">数据的切换 <a class="header-anchor" href="#数据的切换" aria-label="Permalink to &quot;数据的切换&quot;">​</a></h3><p>这里是离屏 Canvas 的难点，即如何将绘制的坐标转化到对应的离屏 Canvas 中，这里笔者通过计算坐标的偏移量，将坐标转化到离屏 Canvas 中。 即关键是 <code>generateOffScreenCanvas</code> 函数如何实现将绘制的内容存储到离屏的 Canvas 中。</p><p>实现思路: 1 获取到绘制图形的最小的点和最大的点，从而计算出宽高 2 获取最小的点坐标，从而计算出相对于离屏 Canvas 的坐标集合 3 将点绘制到离屏 Canvas 中 4 将离屏 Canvas 缓存起来 5 将离屏 Canvas 转化成图片进行绘制</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBoundsFromPoints</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> minX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> minY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> points) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            minX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(minX, x);</span></span>
<span class="line"><span style="color:#E1E4E8;">            minY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(minY, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(maxX, x);</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(maxY, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [minX, minY, maxX, maxY];</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      1 获取当前元素的坐标，相对于离屏 Canvas 的坐标</span></span>
<span class="line"><span style="color:#6A737D;">      2 获取 Canvas 的宽高</span></span>
<span class="line"><span style="color:#6A737D;">      */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getElementAbsoluteCoords</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">minX</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">minY</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxX</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxY</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBoundsFromPoints</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> maxX </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> minX;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> maxY </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> minY;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              minX,</span></span>
<span class="line"><span style="color:#E1E4E8;">              minY,</span></span>
<span class="line"><span style="color:#E1E4E8;">              width,</span></span>
<span class="line"><span style="color:#E1E4E8;">              height,</span></span>
<span class="line"><span style="color:#E1E4E8;">              points: points.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ x: Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> minX), y: Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(y </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> minY) })) </span><span style="color:#6A737D;">// 获取当前元素的坐标，相对于离屏 Canvas 的坐标</span></span>
<span class="line"><span style="color:#E1E4E8;">          };</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateOffScreenCanvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">canvas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;canvas&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个离屏 Canvas</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctxContent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> canvas.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2d&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 获取最小的点和最大的点</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">minX</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">minY</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">realWidth</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">realHeight</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">realPoints</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getElementAbsoluteCoords</span><span style="color:#E1E4E8;">(points);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`realWidth----&gt;\`</span><span style="color:#E1E4E8;">, realWidth, Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(minX));</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`realHeight----&gt;\`</span><span style="color:#E1E4E8;">, realHeight, Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(minY));</span></span>
<span class="line"><span style="color:#E1E4E8;">          canvas.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realWidth </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> dpr </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> padding </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          canvas.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realHeight </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> dpr </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> padding </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          canvas.style.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realWidth </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          canvas.style.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realHeight </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(padding, padding); </span><span style="color:#6A737D;">// 将坐标轴原点移动到（20, 20）</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(dpr, dpr);</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.strokeStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.lineWidth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条宽度</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.lineJoin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;round&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条连接处的样式</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.lineCap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;round&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置线条末端的样式</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">moveTo</span><span style="color:#E1E4E8;">(realPoints[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].x, realPoints[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].y); </span><span style="color:#6A737D;">// 将画笔移动到起始点</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> realPoints.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 取终点，将上一个点作为控制点，平滑过渡</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (realPoints[i].x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> realPoints[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].x) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (realPoints[i].y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> realPoints[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].y) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">              ctxContent.</span><span style="color:#B392F0;">quadraticCurveTo</span><span style="color:#E1E4E8;">(realPoints[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].x, realPoints[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].y, cx, cy);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">stroke</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 画线</span></span>
<span class="line"><span style="color:#E1E4E8;">          ctxContent.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`canvas---&gt;\`</span><span style="color:#E1E4E8;">, canvas.</span><span style="color:#B392F0;">toDataURL</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">          elementWithCanvasCache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(points, {</span></span>
<span class="line"><span style="color:#E1E4E8;">              canvas,</span></span>
<span class="line"><span style="color:#E1E4E8;">              realPoints,</span></span>
<span class="line"><span style="color:#E1E4E8;">              x: minX </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> dpr </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> padding,</span></span>
<span class="line"><span style="color:#E1E4E8;">              y: minY </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> dpr </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> padding</span></span>
<span class="line"><span style="color:#E1E4E8;">          });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBoundsFromPoints</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">points</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> minX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> minY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> points) {</span></span>
<span class="line"><span style="color:#24292E;">            minX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minX, x);</span></span>
<span class="line"><span style="color:#24292E;">            minY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minY, y);</span></span>
<span class="line"><span style="color:#24292E;">            maxX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(maxX, x);</span></span>
<span class="line"><span style="color:#24292E;">            maxY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(maxY, y);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [minX, minY, maxX, maxY];</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      1 获取当前元素的坐标，相对于离屏 Canvas 的坐标</span></span>
<span class="line"><span style="color:#6A737D;">      2 获取 Canvas 的宽高</span></span>
<span class="line"><span style="color:#6A737D;">      */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getElementAbsoluteCoords</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">points</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">minX</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">minY</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">maxX</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">maxY</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBoundsFromPoints</span><span style="color:#24292E;">(points);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">width</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> maxX </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minX;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">height</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> maxY </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minY;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              minX,</span></span>
<span class="line"><span style="color:#24292E;">              minY,</span></span>
<span class="line"><span style="color:#24292E;">              width,</span></span>
<span class="line"><span style="color:#24292E;">              height,</span></span>
<span class="line"><span style="color:#24292E;">              points: points.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ x: Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minX), y: Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minY) })) </span><span style="color:#6A737D;">// 获取当前元素的坐标，相对于离屏 Canvas 的坐标</span></span>
<span class="line"><span style="color:#24292E;">          };</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateOffScreenCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">points</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">canvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;canvas&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个离屏 Canvas</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctxContent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> canvas.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2d&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 获取最小的点和最大的点</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">minX</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">minY</span><span style="color:#24292E;">, </span><span style="color:#E36209;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">realWidth</span><span style="color:#24292E;">, </span><span style="color:#E36209;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">realHeight</span><span style="color:#24292E;">, </span><span style="color:#E36209;">points</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">realPoints</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getElementAbsoluteCoords</span><span style="color:#24292E;">(points);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`realWidth----&gt;\`</span><span style="color:#24292E;">, realWidth, Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(minX));</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`realHeight----&gt;\`</span><span style="color:#24292E;">, realHeight, Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(minY));</span></span>
<span class="line"><span style="color:#24292E;">          canvas.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realWidth </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dpr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> padding </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          canvas.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realHeight </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dpr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> padding </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          canvas.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realWidth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          canvas.style.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realHeight </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;px&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">translate</span><span style="color:#24292E;">(padding, padding); </span><span style="color:#6A737D;">// 将坐标轴原点移动到（20, 20）</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">scale</span><span style="color:#24292E;">(dpr, dpr);</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.strokeStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条颜色</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.lineWidth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条宽度</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.lineJoin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;round&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条连接处的样式</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.lineCap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;round&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 设置线条末端的样式</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">moveTo</span><span style="color:#24292E;">(realPoints[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].x, realPoints[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].y); </span><span style="color:#6A737D;">// 将画笔移动到起始点</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> realPoints.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 取终点，将上一个点作为控制点，平滑过渡</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (realPoints[i].x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> realPoints[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].x) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (realPoints[i].y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> realPoints[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].y) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">              ctxContent.</span><span style="color:#6F42C1;">quadraticCurveTo</span><span style="color:#24292E;">(realPoints[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].x, realPoints[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].y, cx, cy);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">stroke</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 画线</span></span>
<span class="line"><span style="color:#24292E;">          ctxContent.</span><span style="color:#6F42C1;">restore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`canvas---&gt;\`</span><span style="color:#24292E;">, canvas.</span><span style="color:#6F42C1;">toDataURL</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">          elementWithCanvasCache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(points, {</span></span>
<span class="line"><span style="color:#24292E;">              canvas,</span></span>
<span class="line"><span style="color:#24292E;">              realPoints,</span></span>
<span class="line"><span style="color:#24292E;">              x: minX </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dpr </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> padding,</span></span>
<span class="line"><span style="color:#24292E;">              y: minY </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dpr </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> padding</span></span>
<span class="line"><span style="color:#24292E;">          });</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="实现的效果" tabindex="-1">实现的效果 <a class="header-anchor" href="#实现的效果" aria-label="Permalink to &quot;实现的效果&quot;">​</a></h2><p><img src="`+p+'" alt="canvas"></p><h2 id="具体代码" tabindex="-1">具体代码 <a class="header-anchor" href="#具体代码" aria-label="Permalink to &quot;具体代码&quot;">​</a></h2><p><a href="https://github.com/enson0131/learn/blob/main/Canvas/%E7%99%BD%E6%9D%BF%E7%9B%B8%E5%85%B3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93%E5%8F%8A%E7%BC%93%E5%AD%98.html" target="_blank" rel="noreferrer">https://github.com/enson0131/learn/blob/main/Canvas/白板相关/性能优化之离屏渲染及缓存.html</a></p>',19),t=[e];function c(r,E,y,i,F,C){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{D as __pageData,h as default};
