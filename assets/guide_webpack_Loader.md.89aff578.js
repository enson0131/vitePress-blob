import{_ as a,o as e,c as s,Q as o}from"./chunks/framework.b6910bb2.js";const u=JSON.parse('{"title":"Loader","description":"","frontmatter":{},"headers":[],"relativePath":"guide/webpack/Loader.md","filePath":"guide/webpack/Loader.md","lastUpdated":1708079123000}'),l={name:"guide/webpack/Loader.md"},n=o(`<h1 id="loader" tabindex="-1">Loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;Loader&quot;">​</a></h1><p>loader 是一个加载器，让 webpack 拥有加载和解析非 JavaScript 文件的能力</p><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><ol><li>pre - 前置</li><li>normal - 普通</li><li>inline - 行内</li><li>post - 后置</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义在 require 请求内部的叫做行内 loader</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;inline1-loader!inline2-loader!a.js&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义在 require 请求内部的叫做行内 loader</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;inline1-loader!inline2-loader!a.js&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>如果是 <code>!</code> 作为前缀，将禁用 normal loader，例如 <code>!inline1-loader!inline2-loader!a.js</code></li><li>如果是 <code>!!</code> 作为前缀，将禁用所有 loader，例如 <code>!!inline1-loader!inline2-loader!a.js</code></li><li>如果是 <code>-!</code> 作为前缀，将禁用所有 loader 但不包含 post loader，例如 <code>-!inline1-loader!inline2-loader!a.js</code></li></ul>`,6),r=[n];function p(i,t,c,d,_,y){return e(),s("div",null,r)}const E=a(l,[["render",p]]);export{u as __pageData,E as default};
