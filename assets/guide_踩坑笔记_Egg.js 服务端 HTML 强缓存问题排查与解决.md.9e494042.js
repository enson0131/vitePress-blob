import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.b6910bb2.js";const l="/vitePress-blob/assets/11.4ee27b11.png",o="/vitePress-blob/assets/8.703ed857.png",e="/vitePress-blob/assets/12.4a99f5a7.png",t="/vitePress-blob/assets/13.54d9b811.png",c="/vitePress-blob/assets/16.3c33378c.png",r="/vitePress-blob/assets/14.be9edb24.png",E="/vitePress-blob/assets/15.c0c16021.png",f=JSON.parse('{"title":"Egg.js 服务端 HTML 强缓存问题排查与解决","description":"","frontmatter":{},"headers":[],"relativePath":"guide/踩坑笔记/Egg.js 服务端 HTML 强缓存问题排查与解决.md","filePath":"guide/踩坑笔记/Egg.js 服务端 HTML 强缓存问题排查与解决.md","lastUpdated":1748272090000}'),y={name:"guide/踩坑笔记/Egg.js 服务端 HTML 强缓存问题排查与解决.md"},i=p('<h1 id="egg-js-服务端-html-强缓存问题排查与解决" tabindex="-1">Egg.js 服务端 HTML 强缓存问题排查与解决 <a class="header-anchor" href="#egg-js-服务端-html-强缓存问题排查与解决" aria-label="Permalink to &quot;Egg.js 服务端 HTML 强缓存问题排查与解决&quot;">​</a></h1><h2 id="_1-问题现象与影响" tabindex="-1">1.问题现象与影响 <a class="header-anchor" href="#_1-问题现象与影响" aria-label="Permalink to &quot;1.问题现象与影响&quot;">​</a></h2><p>某次线上更新后发现：HTML 页面内容未更新，用户浏览器反复刷新仍显示旧版本。经排查发现服务端对 HTML 文件设置了强缓存，导致浏览器直接从本地缓存加载 HTML，而未向服务器请求最新内容。</p><h2 id="_2-排查路径" tabindex="-1">2.排查路径 <a class="header-anchor" href="#_2-排查路径" aria-label="Permalink to &quot;2.排查路径&quot;">​</a></h2><p>基于请求链路，从浏览器缓存、CDN缓存、nginx 缓存、服务端缓存等多个维度进行排查。</p><p><img src="'+l+`" alt="踩坑笔记"></p><h3 id="_2-1-客户端-浏览器-层面" tabindex="-1">2.1 客户端（浏览器）层面 <a class="header-anchor" href="#_2-1-客户端-浏览器-层面" aria-label="Permalink to &quot;2.1 客户端（浏览器）层面&quot;">​</a></h3><p>例如通过 Service Worker 控制缓存策略</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// sw.js</span></span>
<span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fetch&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">respondWith</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    caches.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(event.request).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(event.request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// sw.js</span></span>
<span class="line"><span style="color:#24292E;">self.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fetch&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">event</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">respondWith</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    caches.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(event.request).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(event.request);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><img src="`+o+'" alt="踩坑笔记"></p><p>基于此，<strong>可以通过 curl 请求页面，发现请求头仍然存在强缓存，说明浏览器未对 HTML 设置缓存</strong>。</p><h3 id="_2-2-cdn-层面" tabindex="-1">2.2 CDN 层面 <a class="header-anchor" href="#_2-2-cdn-层面" aria-label="Permalink to &quot;2.2 CDN 层面&quot;">​</a></h3><p>因请求 HTML 的域名并非 CDN 的域名，因此 CDN 不会对该 HTML 文件进行缓存。</p><h3 id="_2-3-nginx-层面" tabindex="-1">2.3 NGINX 层面 <a class="header-anchor" href="#_2-3-nginx-层面" aria-label="Permalink to &quot;2.3 NGINX 层面&quot;">​</a></h3><p>检查了 NGINX 配置，并确认了 NGINX 配置没有对 HTML 文件进行缓存。</p><h3 id="_2-4-服务端层面" tabindex="-1">2.4 服务端层面 <a class="header-anchor" href="#_2-4-服务端层面" aria-label="Permalink to &quot;2.4 服务端层面&quot;">​</a></h3><p>在服务端中，可能在业务代码的中间件、响应头以及第三方代码模块中设置了强缓存。</p><p>最终根据响应头的标识，全局搜索，最终定位到是服务器 egg-static 插件配置问题，通过 egg-static 的源码我们发现，在返回数据时，会对 HTML 文件设置强缓存的请求头。</p><p><img src="'+e+`" alt="踩坑笔记"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">顺便一提</span><span style="color:#E1E4E8;">: 在 Node 服务中，</span><span style="color:#79B8FF;">HTML</span><span style="color:#E1E4E8;"> 模版不应该转变成静态资源，而是应该使用 </span><span style="color:#9ECBFF;">\`render\`</span><span style="color:#E1E4E8;"> 方法进行模版渲染。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">顺便一提</span><span style="color:#24292E;">: 在 Node 服务中，</span><span style="color:#005CC5;">HTML</span><span style="color:#24292E;"> 模版不应该转变成静态资源，而是应该使用 </span><span style="color:#032F62;">\`render\`</span><span style="color:#24292E;"> 方法进行模版渲染。</span></span></code></pre></div><h2 id="_3-解决方案" tabindex="-1">3.解决方案 <a class="header-anchor" href="#_3-解决方案" aria-label="Permalink to &quot;3.解决方案&quot;">​</a></h2><p>回归业务场景，egg-static 基于 koa-static-cache 实现，默认配置为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">maxAge</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">31536000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 1年缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">buffer</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dynamic</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">preload</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">maxAge</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">31536000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 1年缓存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">buffer</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dynamic</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">preload</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 koa-static-cache 中，存在 <code>files</code> 配置，它是一个文件管理器对象，key 为文件名称，value 是文件制定配置 FileMeta，用于管理文件返回值的相关配置，其中 <code>maxAge</code> 配置用于指定缓存时间，当 <code>maxAge</code> 为 0 时，表示不缓存。</p><p>源码连接: <a href="https://github.com/eggjs/koa-static-cache/blob/master/src/index.ts" target="_blank" rel="noreferrer">https://github.com/eggjs/koa-static-cache/blob/master/src/index.ts</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileMeta</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">maxAge</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">cacheControl</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">buffer</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">zipBuffer</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">mime</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">mtime</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">path</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">md5</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">length</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileMeta</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">maxAge</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">cacheControl</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">buffer</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">zipBuffer</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">mime</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">mtime</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">path</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">md5</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">length</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在源码中，会先执行 loadFile 方法，根据文件名称从 files 中获取文件的配置，然后返回文件配置内容。（LoadFile --&gt; 获取文件配置项 --&gt; 根据配置返回文件内容）</p><p><img src="`+t+'" alt="踩坑笔记"></p><p><img src="'+c+'" alt="踩坑笔记"></p><p>基于此，恰好 koa-static-cache 暴露了 可以配置 <code>files</code> 对象的参数，当配置 HTML 文件的 <code>maxAge</code> 设置为 0 时，可去除强缓存。</p><p><img src="'+r+'" alt="踩坑笔记"></p><p>最终修改后，我们通过 curl 请求页面，发现请求头已经没有强缓存了。</p><p><img src="'+E+'" alt="踩坑笔记"></p><h2 id="_4-总结" tabindex="-1">4.总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4.总结&quot;">​</a></h2><p>通过以上排查，最终定位到是服务器 egg-static 插件配置问题，导致 HTML 文件被缓存。</p><p>基于此，可以通过 egg-static 中的 files 配置，对 HTML 文件进行缓存控制。</p>',36),d=[i];function g(h,F,u,_,b,m){return a(),n("div",null,d)}const B=s(y,[["render",g]]);export{f as __pageData,B as default};
