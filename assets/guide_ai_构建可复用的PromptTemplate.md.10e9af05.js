import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.b6910bb2.js";const u=JSON.parse('{"title":"构建可复用的 PromptTemplate","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ai/构建可复用的PromptTemplate.md","filePath":"guide/ai/构建可复用的PromptTemplate.md","lastUpdated":1748259357000}'),l={name:"guide/ai/构建可复用的PromptTemplate.md"},o=p(`<h1 id="构建可复用的-prompttemplate" tabindex="-1">构建可复用的 PromptTemplate <a class="header-anchor" href="#构建可复用的-prompttemplate" aria-label="Permalink to &quot;构建可复用的 PromptTemplate&quot;">​</a></h1><p>Prompt 是大模型的核心，传统的方式一般是通过字符串或者字符串模版来构建 Prompt，但是这种方式不够灵活，也不够易用。为了解决这个问题，LangChain 引入了 PromptTemplate，它是一个可以复用的 Prompt 模版，可以通过参数化的方式来构建 Prompt。</p><h3 id="基础的-prompt-模版使用" tabindex="-1">基础的 Prompt 模版使用 <a class="header-anchor" href="#基础的-prompt-模版使用" aria-label="Permalink to &quot;基础的 Prompt 模版使用&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 基础的 Prompt 模版使用</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { PromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">greetingPrompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PromptTemplate</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputVariables: [], </span><span style="color:#6A737D;">// 不传入任何变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    template: </span><span style="color:#9ECBFF;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formattedGreetingPrompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> greetingPrompt.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formattedGreetingPrompt); </span><span style="color:#6A737D;">// Prompt 模版 👉 hello world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// -----------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">personalizedGreetingPrompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PromptTemplate</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputVariables: [</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 传入一个变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    template: </span><span style="color:#9ECBFF;">&quot;hello，{name}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formattedPersonalizedGreetingPrompt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> personalizedGreetingPrompt.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;enson&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formattedPersonalizedGreetingPrompt); </span><span style="color:#6A737D;">// 变量 Prompt 模版 👉 hello，enson</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// -----------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 语法糖模版</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">autoInferTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PromptTemplate.</span><span style="color:#B392F0;">fromTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello，{name}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formattedAutoInferTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> autoInferTemplate.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;enson&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(formattedAutoInferTemplate)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 基础的 Prompt 模版使用</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { PromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">greetingPrompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PromptTemplate</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    inputVariables: [], </span><span style="color:#6A737D;">// 不传入任何变量</span></span>
<span class="line"><span style="color:#24292E;">    template: </span><span style="color:#032F62;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formattedGreetingPrompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> greetingPrompt.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formattedGreetingPrompt); </span><span style="color:#6A737D;">// Prompt 模版 👉 hello world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// -----------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">personalizedGreetingPrompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PromptTemplate</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    inputVariables: [</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 传入一个变量</span></span>
<span class="line"><span style="color:#24292E;">    template: </span><span style="color:#032F62;">&quot;hello，{name}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formattedPersonalizedGreetingPrompt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> personalizedGreetingPrompt.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;enson&quot;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formattedPersonalizedGreetingPrompt); </span><span style="color:#6A737D;">// 变量 Prompt 模版 👉 hello，enson</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// -----------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 语法糖模版</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">autoInferTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PromptTemplate.</span><span style="color:#6F42C1;">fromTemplate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello，{name}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formattedAutoInferTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> autoInferTemplate.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;enson&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(formattedAutoInferTemplate)</span></span></code></pre></div><p>基础的 Prompt 模版的使用类似于字符串模版，只是在字符串中加入了变量，然后通过 <code>format</code> 方法传入变量的值，就可以得到最终的 Prompt 模版。</p><h3 id="chat-prompt-模版使用" tabindex="-1">Chat Prompt 模版使用 <a class="header-anchor" href="#chat-prompt-模版使用" aria-label="Permalink to &quot;Chat Prompt 模版使用&quot;">​</a></h3><p>经过了前面的基础 Prompt 模版的使用，我们可以进一步使用 Chat Prompt 模版，在日常开发中，使用 Chat Prompt 模版的场景更多。</p><p>因为在和各种模型聊天交互时，在构建信息不仅需要包含上下文内容，还需要包含对应的角色信息。例如这条信息是由 人类、AI 还是给 ChatBot 指定的 System 信息。</p><p>这种结构化的信息有助于模型更好的理解上下文，从而更好的回答问题。</p><p>LangChain 提供了几种与聊天相关的提示模版类，如 <code>SystemMessagePromptTemplate</code>、<code>HumanMessagePromptTemplate</code>、<code>AIMessagePromptTemplate</code> 以及 <code>ChatPromptTemplate</code> 等。</p><p>前面三个对应着不同的角色:</p><ul><li><code>system</code> 角色的消息通常用于设置对话的上下文或指定模型采取特定的行为模式。这些消息不会直接显示在对话中，但它们对模型的行为有指导作用。 可以理解成模型的元信息，权重非常高，在这里有效的构建 prompt 能取得非常好的效果。</li><li><code>user</code> 角色代表真实用户在对话中的发言。这些消息通常是问题、指令或者评论，反映了用户的意图和需求。</li><li><code>assistant</code> 角色的消息代表 AI 模型的回复。这些消息是模型根据 system 的指示和 user 的输入生成的。</li></ul><p>接下来我们以 <code>翻译</code> 的场景为例，来构建一个 Chat Prompt 模版。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { SystemMessagePromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@langchain/core/prompts&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { HumanMessagePromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ChatPromptTemplate } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/prompts&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StringOutputParser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@langchain/core/output_parsers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Ollama } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@langchain/community/llms/ollama&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">systemTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;你是一个专业的翻译员，你的任务是将文本从{source_lang}翻译成{target_lang}。&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">humanTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;请翻译这句话：{text}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chatPrompt2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ChatPromptTemplate.</span><span style="color:#B392F0;">fromMessages</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;system&quot;</span><span style="color:#E1E4E8;">, systemTemplate],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;human&quot;</span><span style="color:#E1E4E8;">, humanTemplate],</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outputParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringOutputParser</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 输出字符串</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chatModel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ollama</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    baseUrl: </span><span style="color:#9ECBFF;">&quot;http://localhost:11434&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    model: </span><span style="color:#9ECBFF;">&quot;llama3&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chatPrompt2.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(chatModel).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(outputParser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    source_lang: </span><span style="color:#9ECBFF;">&quot;中文&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    target_lang: </span><span style="color:#9ECBFF;">&quot;英语&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    text: </span><span style="color:#9ECBFF;">&quot;你好，世界&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { SystemMessagePromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@langchain/core/prompts&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { HumanMessagePromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ChatPromptTemplate } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/prompts&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StringOutputParser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@langchain/core/output_parsers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Ollama } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@langchain/community/llms/ollama&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">systemTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;你是一个专业的翻译员，你的任务是将文本从{source_lang}翻译成{target_lang}。&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">humanTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;请翻译这句话：{text}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chatPrompt2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ChatPromptTemplate.</span><span style="color:#6F42C1;">fromMessages</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;system&quot;</span><span style="color:#24292E;">, systemTemplate],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;human&quot;</span><span style="color:#24292E;">, humanTemplate],</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">outputParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringOutputParser</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 输出字符串</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chatModel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ollama</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    baseUrl: </span><span style="color:#032F62;">&quot;http://localhost:11434&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    model: </span><span style="color:#032F62;">&quot;llama3&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chatPrompt2.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(chatModel).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(outputParser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    source_lang: </span><span style="color:#032F62;">&quot;中文&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    target_lang: </span><span style="color:#032F62;">&quot;英语&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    text: </span><span style="color:#032F62;">&quot;你好，世界&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span></code></pre></div><h3 id="组合多个-prompt-模版" tabindex="-1">组合多个 Prompt 模版 <a class="header-anchor" href="#组合多个-prompt-模版" aria-label="Permalink to &quot;组合多个 Prompt 模版&quot;">​</a></h3><p>可以通过 <code>PipelinePromptTemplate</code> 组合多个 Prompt 模版，这样可以更好的复用和管理 Prompt 模版。</p><p>在 PipelinePromptTemplate 有两个核心的概念：</p><ul><li><code>pipelinePrompts</code>，一组 <code>object</code>，每个 object 表示 prompt 运行后赋值给 name 变量</li><li><code>finalPrompt</code>，表示最终输出的 prompt</li></ul>`,18),e=[o];function t(c,r,E,y,i,m){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{u as __pageData,d as default};
