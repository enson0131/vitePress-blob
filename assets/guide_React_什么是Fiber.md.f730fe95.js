import{_ as e,o as i,c as r,Q as a}from"./chunks/framework.b6910bb2.js";const t="/vitePress-blob/assets/10.44b174be.png",F=JSON.parse('{"title":"什么是 Fiber","description":"","frontmatter":{},"headers":[],"relativePath":"guide/React/什么是Fiber.md","filePath":"guide/React/什么是Fiber.md","lastUpdated":1706754467000}'),l={name:"guide/React/什么是Fiber.md"},o=a('<h1 id="什么是-fiber" tabindex="-1">什么是 Fiber <a class="header-anchor" href="#什么是-fiber" aria-label="Permalink to &quot;什么是 Fiber&quot;">​</a></h1><h2 id="fiber-是什么" tabindex="-1">Fiber 是什么 <a class="header-anchor" href="#fiber-是什么" aria-label="Permalink to &quot;Fiber 是什么&quot;">​</a></h2><ul><li><p>从计算机领域来看: Fiber 是比线程还要纤细的一个过程, 也就是所谓的 “纤程”</p></li><li><p>从架构角度上看: Fiber是对 React 核心算法的重写，将 React16以前的 Stack Reconciler 替换成了异步可中断的 Fiber Reconciler</p></li><li><p>从编码的角度上看: Fiber 是 React 内部定义的数据结构，每一个节点都是一个 FiberNode 对象，用来存储组件的各种状态</p></li><li><p>从工作流的角度上看: Fiber 节点保存了组件需要更新的状态和副作用, 便于更新与复用</p></li></ul><p>Fiber 架构应用的目的是为了实现任务可中断、可恢复、并赋予任务优先级，从而实现时间切片，让出主线程，让主线程有时间去处理其他任务，从而提升用户体验。</p><h2 id="fiber-之间的关系图" tabindex="-1">Fiber 之间的关系图 <a class="header-anchor" href="#fiber-之间的关系图" aria-label="Permalink to &quot;Fiber 之间的关系图&quot;">​</a></h2><ul><li>通过 child 可以获取子节点</li><li>通过 sibling 可以获取兄弟节点</li><li>通过 return 可以获取父节点</li></ul><p><img src="'+t+'" alt="Fiber 之间的关系图"></p>',7),c=[o];function s(b,n,_,d,p,h){return i(),r("div",null,c)}const f=e(l,[["render",s]]);export{F as __pageData,f as default};
