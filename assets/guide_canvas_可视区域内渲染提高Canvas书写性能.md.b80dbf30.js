import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.b6910bb2.js";const p="/vitePress-blob/assets/13.ebfa1a54.png",o="/vitePress-blob/assets/14.92ddec45.png",e="/vitePress-blob/assets/15.3e4e2641.gif",t="/vitePress-blob/assets/17.75314470.png",c="/vitePress-blob/assets/18.34b0479f.gif",D=JSON.parse('{"title":"可视区域内渲染提高 Canvas 的书写性能","description":"","frontmatter":{},"headers":[],"relativePath":"guide/canvas/可视区域内渲染提高Canvas书写性能.md","filePath":"guide/canvas/可视区域内渲染提高Canvas书写性能.md","lastUpdated":1737449497000}'),r={name:"guide/canvas/可视区域内渲染提高Canvas书写性能.md"},E=l('<h1 id="可视区域内渲染提高-canvas-的书写性能" tabindex="-1">可视区域内渲染提高 Canvas 的书写性能 <a class="header-anchor" href="#可视区域内渲染提高-canvas-的书写性能" aria-label="Permalink to &quot;可视区域内渲染提高 Canvas 的书写性能&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>上一节我们通过离屏渲染提高了 Canvas 的渲染性能，但是离屏渲染也有一些缺点，比如会增加内存的使用，而且在某些场景下，离屏渲染的性能并不会比直接在 Canvas 上绘制要高。本节我们将介绍如何通过可视区域内渲染提高 Canvas 的书写性能。</p><h2 id="前提" tabindex="-1">前提 <a class="header-anchor" href="#前提" aria-label="Permalink to &quot;前提&quot;">​</a></h2><p>一般我们说的可视区域内渲染，是指在 Canvas 上只绘制可视区域内的内容，而不是绘制整个 Canvas 的内容。这样做的好处是可以减少 Canvas 的绘制区域，从而提高 Canvas 的渲染性能。</p><p>对于 Canvas 而言，无法无限制地扩大 Canvas 的面积，因此浏览器对 Canvas 的大小也有一定的限制。从 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas#%E6%9C%80%E5%A4%A7%E7%9A%84%E7%94%BB%E5%B8%83%E5%B0%BA%E5%AF%B8" target="_blank" rel="noreferrer">MDN 文档</a> 可知, 在 Chrome 浏览器中，Canvas 的大小限制为 32767px * 32767px。由于 Canvas 的大小限制，因此我们在实现 <code>无限画布</code> 的功能时，不能无限拓展 Canvas 的大小，可以通过坐标的切换，来实现无限画布的功能。</p><h2 id="实现无限画布" tabindex="-1">实现无限画布 <a class="header-anchor" href="#实现无限画布" aria-label="Permalink to &quot;实现无限画布&quot;">​</a></h2><h3 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h3><p>记初始坐标A (x, y), 横向滚动距离为 scrollX, 纵向滚动距离为 scrollY</p><p>在初始状态下, scrollX、scrollY 均为 0</p><p><img src="'+p+'" alt="初始状态图"></p><p>假设现在，我们在水平方向向右滚动了scrollX，垂直方向向下滚动scrollY。那么滚动后的坐标就是</p><p>x1 = x - scrollX</p><p>y1 = y - scrollY</p><p>这里大家可能会有疑惑，为什么是减法呢？因为向下滚动后，绘制的图形应该是往上移动的，因此我们需要减去滚动的距离。</p><p><img src="'+o+`" alt="滚动后的状态图"></p><p>在代码中，我们可以通过监听 Canvas 的 WheelEvent 事件，来获取滚动的距离，然后根据上面的公式计算出滚动后的坐标，最后重新绘制 Canvas。</p><p>具体实现如下</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">clearRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(scrollX, scrollY);</span></span>
<span class="line"><span style="color:#6A737D;">// 绘制相关的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">ctx.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">clearRect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">translate</span><span style="color:#24292E;">(scrollX, scrollY);</span></span>
<span class="line"><span style="color:#6A737D;">// 绘制相关的逻辑</span></span>
<span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">restore</span><span style="color:#24292E;">();</span></span></code></pre></div><p>可以看到，我们在绘制图形之前，我们通过 <code>translate</code> API 先将 Canvas 的坐标原点移动到 (scrollX, scrollY) 的位置，然后再绘制图形。这样做的好处是，我们在绘制图形时，不需要再去计算图形的坐标，而是直接使用图形的坐标即可, 以达到图形滚动的目的</p><h3 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h3><p>WheelEvent 事件能够监听鼠标滚动。其中的 WheelEvent.deltaX 记录了横向滚动量（也就是我们上面说到的 scrollX），WheelEvent.deltaY 记录了纵向滚动量 （上面说的 scrollY）</p><p>我们可以在 Canvas 上监听 WheelEvent 事件，然后根据 WheelEvent.deltaX 和 WheelEvent.deltaY 获取滚动后的距离，然后根据上面的公式计算出滚动后的坐标，最后重新绘制 Canvas。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleCanvasWheel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">WheelEvent</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLCanvasElement</span><span style="color:#E1E4E8;">&gt;) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ctxRef.current) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">deltaX</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">deltaY</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">    appState.current.scrollX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> appState.current.scrollX </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> deltaX;</span></span>
<span class="line"><span style="color:#E1E4E8;">    appState.current.scrollY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> appState.current.scrollY </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> deltaY;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(ctxRef.current);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">canvas</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{canvasRef}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;draw&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{styles[</span><span style="color:#9ECBFF;">&quot;draw&quot;</span><span style="color:#E1E4E8;">]}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onWheel</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{handleCanvasWheel}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &gt;&lt;/</span><span style="color:#85E89D;">canvas</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleCanvasWheel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">WheelEvent</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HTMLCanvasElement</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ctxRef.current) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">deltaX</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">deltaY</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">    appState.current.scrollX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> appState.current.scrollX </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> deltaX;</span></span>
<span class="line"><span style="color:#24292E;">    appState.current.scrollY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> appState.current.scrollY </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> deltaY;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(ctxRef.current);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">canvas</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{canvasRef}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;draw&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{styles[</span><span style="color:#032F62;">&quot;draw&quot;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onWheel</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{handleCanvasWheel}</span></span>
<span class="line"><span style="color:#24292E;">      &gt;&lt;/</span><span style="color:#22863A;">canvas</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span></code></pre></div><h3 id="实现效果" tabindex="-1">实现效果 <a class="header-anchor" href="#实现效果" aria-label="Permalink to &quot;实现效果&quot;">​</a></h3><p><img src="`+e+`" alt="canvas"></p><p><a href="https://github.com/enson0131/learn/blob/main/Canvas/%E7%99%BD%E6%9D%BF%E7%9B%B8%E5%85%B3/canvas-react-demo/my-react-app/src/components/RenderInfiniteCanvas/index.tsx" target="_blank" rel="noreferrer">具体代码</a></p><h2 id="可视区域内渲染" tabindex="-1">可视区域内渲染 <a class="header-anchor" href="#可视区域内渲染" aria-label="Permalink to &quot;可视区域内渲染&quot;">​</a></h2><p>基于上部分，我们已经实现了无限画布的功能，但我们在绘制图形时，是将整个 Canvas 的内容都绘制了一遍，而不是只绘制可视区域内的内容。因此，我们需要在绘制图形时，只绘制可视区域内的内容，从而提高 Canvas 的书写性能</p><h3 id="实现思路-1" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-1" aria-label="Permalink to &quot;实现思路&quot;">​</a></h3><p>我们可以在绘制图形时，判断图形是否在可视区域内，如果在可视区域内，则绘制图形，否则不绘制图形。</p><p>判断的逻辑也比较简单，获取图形的坐标的最大值和最小值，然后判断最大值和最小值是否在可视区域内即可。</p><p>获取当前书写的图形的最大值和最小值的逻辑如下</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pointer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBoundsFromPoints</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">points</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pointer</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> minX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> minY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> maxY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> points) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    minX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(minX, x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    minY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(minY, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(maxX, x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(maxY, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [minX, minY, maxX, maxY];</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBoundsFromPoints</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">points</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointer</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> minX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> minY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> maxY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> points) {</span></span>
<span class="line"><span style="color:#24292E;">    minX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minX, x);</span></span>
<span class="line"><span style="color:#24292E;">    minY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minY, y);</span></span>
<span class="line"><span style="color:#24292E;">    maxX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(maxX, x);</span></span>
<span class="line"><span style="color:#24292E;">    maxY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(maxY, y);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [minX, minY, maxX, maxY];</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>判断最大值和最小值是否在可视区域内，可以通过最小点是否在大于可视区域的最小值，最大点是否小于可视区域的最大值来判断</p><p><img src="`+t+`" alt="canvas"></p><p>如上图所示，判断图形是否在可视区域内，需要判断图形的最大点 <code>大于</code> A1 &amp;&amp; 图形的最小点 <code>小于</code> A2 即可。 即判断 maxX &gt;= scrollX &amp;&amp; maxY &gt;= scrollY &amp;&amp; minX &lt;= scrollX + window.innerWidth &amp;&amp; minY &lt;= scrollY + window.innerHeight</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 判断点是否在画布内</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">element</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">canvasWidth</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">canvasHeight</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isVisibleElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">element</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pointer</span><span style="color:#E1E4E8;">[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  screenCoords </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    minX: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    minY: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxX: window.innerWidth,</span></span>
<span class="line"><span style="color:#E1E4E8;">    maxY: window.innerHeight,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">x1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBoundsFromPoints</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    x1 </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> screenCoords.maxX </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    y1 </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> screenCoords.maxY </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    x2 </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> screenCoords.minX </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    y2 </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> screenCoords.minY</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 判断点是否在画布内</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">element</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">canvasWidth</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">canvasHeight</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isVisibleElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">element</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointer</span><span style="color:#24292E;">[],</span></span>
<span class="line"><span style="color:#24292E;">  screenCoords </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    minX: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    minY: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    maxX: window.innerWidth,</span></span>
<span class="line"><span style="color:#24292E;">    maxY: window.innerHeight,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">x1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBoundsFromPoints</span><span style="color:#24292E;">(element);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    x1 </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> screenCoords.maxX </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    y1 </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> screenCoords.maxY </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    x2 </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> screenCoords.minX </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    y2 </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> screenCoords.minY</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="具体实现-1" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现-1" aria-label="Permalink to &quot;具体实现&quot;">​</a></h3><p>在 绘制前，先判断图形是否在可视区域内，如果在可视区域内，则绘制图形，否则不绘制图形。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCallback</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CanvasRenderingContext2D</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">points</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pointer</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.</span><span style="color:#B392F0;">clearRect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, window.innerWidth, window.innerHeight);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pointList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">elementsRes.current, points </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []];</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.</span><span style="color:#B392F0;">translate</span><span style="color:#E1E4E8;">(appState.current.scrollX, appState.current.scrollY);</span></span>
<span class="line"><span style="color:#E1E4E8;">      pointList.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">points.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断是否在可视区域内</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">\`是否在可视区域内: \`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">isVisibleElement</span><span style="color:#E1E4E8;">(points, {</span></span>
<span class="line"><span style="color:#E1E4E8;">            minX: </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">appState.current.scrollX,</span></span>
<span class="line"><span style="color:#E1E4E8;">            minY: </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">appState.current.scrollY,</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxX: window.innerWidth </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> appState.current.scrollX,</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxY: window.innerHeight </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> appState.current.scrollY,</span></span>
<span class="line"><span style="color:#E1E4E8;">          })</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 这里为什么是减去scrollX和scrollY呢？</span></span>
<span class="line"><span style="color:#6A737D;">         * （上文 handleCanvasWheel 函数有具体代码 👆）</span></span>
<span class="line"><span style="color:#6A737D;">         * 因为鼠标在向下滚动的时候, appState.current.scrollY 是减去了偏移量，也就是这里的 appState.current.scrollY = -偏移量 </span></span>
<span class="line"><span style="color:#6A737D;">         * 因此我们需要通过减法来获取滚动后的真实坐标</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">isVisibleElement</span><span style="color:#E1E4E8;">(points, {</span></span>
<span class="line"><span style="color:#E1E4E8;">            minX: </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">appState.current.scrollX,</span></span>
<span class="line"><span style="color:#E1E4E8;">            minY: </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">appState.current.scrollY,</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxX: window.innerWidth </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> appState.current.scrollX,</span></span>
<span class="line"><span style="color:#E1E4E8;">            maxY: window.innerHeight </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> appState.current.scrollY,</span></span>
<span class="line"><span style="color:#E1E4E8;">          })</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">quadraticCurveTo</span><span style="color:#E1E4E8;">(ctx, points);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    []</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCallback</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CanvasRenderingContext2D</span><span style="color:#24292E;">, </span><span style="color:#E36209;">points</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointer</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      ctx.</span><span style="color:#6F42C1;">clearRect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, window.innerWidth, window.innerHeight);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pointList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">elementsRes.current, points </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []];</span></span>
<span class="line"><span style="color:#24292E;">      ctx.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      ctx.</span><span style="color:#6F42C1;">translate</span><span style="color:#24292E;">(appState.current.scrollX, appState.current.scrollY);</span></span>
<span class="line"><span style="color:#24292E;">      pointList.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">points</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">points.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断是否在可视区域内</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">\`是否在可视区域内: \`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">isVisibleElement</span><span style="color:#24292E;">(points, {</span></span>
<span class="line"><span style="color:#24292E;">            minX: </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">appState.current.scrollX,</span></span>
<span class="line"><span style="color:#24292E;">            minY: </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">appState.current.scrollY,</span></span>
<span class="line"><span style="color:#24292E;">            maxX: window.innerWidth </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> appState.current.scrollX,</span></span>
<span class="line"><span style="color:#24292E;">            maxY: window.innerHeight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> appState.current.scrollY,</span></span>
<span class="line"><span style="color:#24292E;">          })</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 这里为什么是减去scrollX和scrollY呢？</span></span>
<span class="line"><span style="color:#6A737D;">         * （上文 handleCanvasWheel 函数有具体代码 👆）</span></span>
<span class="line"><span style="color:#6A737D;">         * 因为鼠标在向下滚动的时候, appState.current.scrollY 是减去了偏移量，也就是这里的 appState.current.scrollY = -偏移量 </span></span>
<span class="line"><span style="color:#6A737D;">         * 因此我们需要通过减法来获取滚动后的真实坐标</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">isVisibleElement</span><span style="color:#24292E;">(points, {</span></span>
<span class="line"><span style="color:#24292E;">            minX: </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">appState.current.scrollX,</span></span>
<span class="line"><span style="color:#24292E;">            minY: </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">appState.current.scrollY,</span></span>
<span class="line"><span style="color:#24292E;">            maxX: window.innerWidth </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> appState.current.scrollX,</span></span>
<span class="line"><span style="color:#24292E;">            maxY: window.innerHeight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> appState.current.scrollY,</span></span>
<span class="line"><span style="color:#24292E;">          })</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">quadraticCurveTo</span><span style="color:#24292E;">(ctx, points);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">      ctx.</span><span style="color:#6F42C1;">restore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    []</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="实现效果-1" tabindex="-1">实现效果 <a class="header-anchor" href="#实现效果-1" aria-label="Permalink to &quot;实现效果&quot;">​</a></h3><p><img src="`+c+'" alt="canvas"></p><p><a href="https://github.com/enson0131/learn/blob/main/Canvas/%E7%99%BD%E6%9D%BF%E7%9B%B8%E5%85%B3/canvas-react-demo/my-react-app/src/components/RenderCanvasInScreen/index.tsx" target="_blank" rel="noreferrer">具体代码</a></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas#%E6%9C%80%E5%A4%A7%E7%9A%84%E7%94%BB%E5%B8%83%E5%B0%BA%E5%AF%B8" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas#最大的画布尺寸</a></li></ul>',46),y=[E];function i(F,d,m,h,C,A){return n(),a("div",null,y)}const x=s(r,[["render",i]]);export{D as __pageData,x as default};
