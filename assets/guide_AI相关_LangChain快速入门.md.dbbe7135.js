import{_ as a,o as n,c as e,Q as l}from"./chunks/framework.b6910bb2.js";const _=JSON.parse('{"title":"LangChain 快速入门","description":"","frontmatter":{},"headers":[],"relativePath":"guide/AI相关/LangChain快速入门.md","filePath":"guide/AI相关/LangChain快速入门.md","lastUpdated":1717756681000}'),s={name:"guide/AI相关/LangChain快速入门.md"},t=l('<h1 id="langchain-快速入门" tabindex="-1">LangChain 快速入门 <a class="header-anchor" href="#langchain-快速入门" aria-label="Permalink to &quot;LangChain 快速入门&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>要安装这个包，你可以使用 npm 或 yarn：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">langchain</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">langchain</span></span></code></pre></div><h2 id="安装环境" tabindex="-1">安装环境 <a class="header-anchor" href="#安装环境" aria-label="Permalink to &quot;安装环境&quot;">​</a></h2><p>node &gt;= 18.x</p><h2 id="什么是-lcel-langchain-expression-language" tabindex="-1">什么是 LCEL (LangChain Expression Language) <a class="header-anchor" href="#什么是-lcel-langchain-expression-language" aria-label="Permalink to &quot;什么是 LCEL (LangChain Expression Language)&quot;">​</a></h2><p>LangChain Expression Language is a way to create arbitrary custom chains. It is built on the <a href="https://v02.api.js.langchain.com/classes/langchain_core_runnables.Runnable.html" target="_blank" rel="noreferrer">Runnable</a> protocol.</p><p>LCEL 无论是 python 还是 js 版本都在主推的新设计，能创建自定义的链，它是基于 <a href="https://v02.api.js.langchain.com/classes/langchain_core_runnables.Runnable.html" target="_blank" rel="noreferrer">Runnable</a> 协议构建的。</p><h2 id="lcel-有什么优势" tabindex="-1">LCEL 有什么优势 <a class="header-anchor" href="#lcel-有什么优势" aria-label="Permalink to &quot;LCEL 有什么优势&quot;">​</a></h2><p>LCEL 从底层设计的目标就是支持 <strong>从原型到生产</strong> 完整流程不需要修改任何代码，也就是我们在写的任何原型代码不需要太多的改变就能支持生产级别的各种特性（比如并行、steaming 等），具体来说会有这些优势：</p><ul><li>并行: 只要是整个 chain 中有可以并行的步骤就会自动的并行，来减少使用时的延迟。</li><li>自动的重试和 fallback: 大部分 chain 的组成部分都有自动的重试（比如因为网络原因的失败）和回退机制，来解决很多请求的出错问题。</li><li></li></ul><h1 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h1><ul><li><a href="https://js.langchain.com/v0.2/docs/how_to/" target="_blank" rel="noreferrer">https://js.langchain.com/v0.2/docs/how_to/</a></li><li></li></ul>',14),o=[t];function r(i,c,h,p,d,g){return n(),e("div",null,o)}const b=a(s,[["render",r]]);export{_ as __pageData,b as default};
