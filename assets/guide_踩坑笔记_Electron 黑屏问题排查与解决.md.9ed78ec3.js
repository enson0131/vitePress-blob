import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.b6910bb2.js";const n="/vitePress-blob/assets/21.32c7a8c7.jpg",l="/vitePress-blob/assets/17.cb97ef14.png",p="/vitePress-blob/assets/18.e6708c20.png",r="/vitePress-blob/assets/19.a0cee46d.png",t="/vitePress-blob/assets/20.ee54e3f0.png",v=JSON.parse('{"title":"Electron 黑屏问题排查与解决","description":"","frontmatter":{},"headers":[],"relativePath":"guide/踩坑笔记/Electron 黑屏问题排查与解决.md","filePath":"guide/踩坑笔记/Electron 黑屏问题排查与解决.md","lastUpdated":1748259120000}'),c={name:"guide/踩坑笔记/Electron 黑屏问题排查与解决.md"},i=o('<h1 id="electron-黑屏问题排查与解决" tabindex="-1">Electron 黑屏问题排查与解决 <a class="header-anchor" href="#electron-黑屏问题排查与解决" aria-label="Permalink to &quot;Electron 黑屏问题排查与解决&quot;">​</a></h1><p><img src="'+n+'" alt="踩坑笔记"></p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在风和日丽的下午，小C 正在愉快的敲着代码，突然接到一个用户反馈，说在他的 Windows 机器上打开 Electron 应用就直接白屏了。</p><p>小 C 一脸蒙蔽，这怎么可能呢？因为小 C 的 Windows 机器上安装了 Electron 应用，并且可以正常运行。</p><p>但在疑惑之际，小 C 还是决定排查一下这个问题，毕竟用户反馈了，总不能不解决吧。</p><h2 id="如何调试-electron-应用" tabindex="-1">如何调试 Electron 应用 <a class="header-anchor" href="#如何调试-electron-应用" aria-label="Permalink to &quot;如何调试 Electron 应用&quot;">​</a></h2><p>在定位问题之前，我们需要知道如何调试 Electron 应用。</p><h3 id="调试主进程" tabindex="-1">调试主进程 <a class="header-anchor" href="#调试主进程" aria-label="Permalink to &quot;调试主进程&quot;">​</a></h3><p>为了提供一个可以调试主进程的方法，Electron 提供了 --inspect 和 --inspect-brk 开关。</p><p>--inspect=[port]</p><p>Electron 将监听指定 port 上的 V8 调试协议消息， <code>外部调试器</code>需要连接到此端口上。 port 默认为 9229。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">electron</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect=9229</span><span style="color:#E1E4E8;"> [app.exe]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">electron</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect=9229</span><span style="color:#24292E;"> [app.exe]</span></span></code></pre></div><p>--inspect-brk=[port]</p><p>与 --inspect 类似，但会在第一行暂停执行，直到调试器连接。</p><h4 id="这里提到了一个概念-外部调试器-什么是外部调试器" tabindex="-1">这里提到了一个概念，<code>外部调试器</code>，什么是外部调试器？ <a class="header-anchor" href="#这里提到了一个概念-外部调试器-什么是外部调试器" aria-label="Permalink to &quot;这里提到了一个概念，`外部调试器`，什么是外部调试器？&quot;">​</a></h4><p>外部调试器是指一个独立的工具，用于连接到 Electron 应用的调试协议。例如我们的 Chrome DevTools 就是外部调试器。</p><p>通过访问 <code>chrome://inspect</code> 来连接并在那里选择需要检查的 Electron 应用程序。</p><p><img src="'+l+`" alt="踩坑笔记"></p><h3 id="调试渲染进程" tabindex="-1">调试渲染进程 <a class="header-anchor" href="#调试渲染进程" aria-label="Permalink to &quot;调试渲染进程&quot;">​</a></h3><p>可以通过编程的方式在 BrowserWindow 的 webContents中调用openDevTool()API来打开它们：👇</p><div class="language-Js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">BrowserWindow</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electron&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">win</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BrowserWindow</span><span style="color:#E1E4E8;">({</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">params});</span></span>
<span class="line"><span style="color:#E1E4E8;">win.webContents.</span><span style="color:#B392F0;">openDevTools</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">BrowserWindow</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electron&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">win</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BrowserWindow</span><span style="color:#24292E;">({</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">params});</span></span>
<span class="line"><span style="color:#24292E;">win.webContents.</span><span style="color:#6F42C1;">openDevTools</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="v8-崩溃" tabindex="-1">V8 崩溃 <a class="header-anchor" href="#v8-崩溃" aria-label="Permalink to &quot;V8 崩溃&quot;">​</a></h3><p>如果V8环境崩溃的话, DevTools 将显示以下信息👇</p><p><code>DevTools was disconnected from the page.（DevTools 与页面断开连接） Once page is reloaded, DevTools will automatically reconnect.（页面重新载入后，DevTools 将自动重新连接）</code></p><p>传入 --enable-logging 将导致日志打印到 stderr。 传递 --enable-logging=file 将导致日志被保存到指定的文件内, 通过 --log-file=指定目录, 或者如果用户数据目录 --log-file 没有指定则直接存放到 electron_debug.log.</p><h3 id="crashreporter-收集主进程、渲染进程奔溃" tabindex="-1">crashReporter 收集主进程、渲染进程奔溃 <a class="header-anchor" href="#crashreporter-收集主进程、渲染进程奔溃" aria-label="Permalink to &quot;crashReporter 收集主进程、渲染进程奔溃&quot;">​</a></h3><p>通过 <code>crashReporter</code> 可以收集崩溃信息，并发送给开发者。</p><div class="language-Js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">crashReporter</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electron&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">crashReporter.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  productName: </span><span style="color:#9ECBFF;">&#39;Your Product Name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  companyName: </span><span style="color:#9ECBFF;">&#39;Your Company Name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  submitURL: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  uploadToServer: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">crashReporter</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electron&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">crashReporter.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  productName: </span><span style="color:#032F62;">&#39;Your Product Name&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  companyName: </span><span style="color:#032F62;">&#39;Your Company Name&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  submitURL: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  uploadToServer: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>通过这段代码，我们可以收集到崩溃信息，生成 .dmp 文件</p><p>通过 Visual Studio (C++ 编辑器) 打开 .dmp 文件，可以获取到崩溃信息。</p><h2 id="electron-白屏问题的可能原因" tabindex="-1">Electron 白屏问题的可能原因 <a class="header-anchor" href="#electron-白屏问题的可能原因" aria-label="Permalink to &quot;Electron 白屏问题的可能原因&quot;">​</a></h2><p>有了前面的知识储备后，小C 迫不及待的开始分析起了 Electron 白屏可能的原因。</p><p>Electron 应用白屏问题通常与渲染进程崩溃相关，以下是常见原因分类：</p><ol><li>原生模块依赖缺失</li></ol><p>动态链接库（DLL）缺失：引用了未正确打包或系统环境未安装的 C++ 模块依赖。</p><p>Node 原生模块未正确编译：未针对当前平台（Windows/macOS/Linux）重新编译 .node 文件。</p><ol start="2"><li>代码逻辑异常</li></ol><p>渲染进程 JavaScript 代码存在未捕获的异常（如空指针、未定义变量）。</p><p>主进程与渲染进程通信中断（如 IPC 消息未正确处理）。</p><p>异步操作未正确处理（如未捕获的 Promise 异常）。</p><ol start="3"><li>环境兼容性问题</li></ol><p>Node.js 或 Electron 版本不兼容。</p><p>系统权限不足（如文件读写权限）。</p><p>安全软件拦截（如误判为恶意进程）。</p><h2 id="问题排查" tabindex="-1">问题排查 <a class="header-anchor" href="#问题排查" aria-label="Permalink to &quot;问题排查&quot;">​</a></h2><p>根据问题的描述，小 C 猜测是原生模块依赖缺失导致的，但不确定是在渲染进程崩溃还是主进程崩溃。</p><p>小 C 首选怀疑可能是主进程卡死 or 崩溃导致，但通过主进程的日志，小 C 并没有发现异常。</p><p>基于此，小 C 将全部页面打开 <code>openDevTools</code> 调试工具, 想通过控制台日志的信息来判断是哪个进程崩溃了。</p><p>但遗憾的事，控制台打不开。显示 <code>DevTools was disconnected from the page.（DevTools 与页面断开连接） Once page is reloaded, DevTools will automatically reconnect.（页面重新载入后，DevTools 将自动重新连接）</code>。</p><p>这里我们可以很快知道是 V8 崩溃了，但问题不得而知。</p><p>因此，小 C 决定先通过 <code>crashReporter</code> 收集崩溃信息，然后通过 Visual Studio (C++ 编辑器) 打开 .dmp 文件，获取崩溃信息。</p><p>果然，在收集的 .dmp 文件中，通过 Visual Studio (C++ 编辑器) 打开后，点击执行 <code>仅限本机运行调试</code>，小 C 发现了崩溃信息。</p><p><img src="`+p+'" alt="踩坑笔记"></p><p><img src="'+r+'" alt="踩坑笔记"></p><p>基于此，小 C 发现了是系统中缺少了 <code>MSVCP140.dll</code> 文件，导致 Electron 渲染进程崩溃。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>由于 <code>MSVCP140.dll</code> 文件是 Visual C++ Redistributable Packages的一部分，需要下载并重装来修复该问题。从 <a href="https://learn.microsoft.com/zh-cn/cpp/windows/latest-supported-vc-redist?view=msvc-170" target="_blank" rel="noreferrer">Microsoft官方网站</a> 下载最新版本的 Visual C++ Redistributable，并在 nsis 安装程序上，安装 <code>vc_redist.x64.exe</code>、 <code>vc_redist.x86.exe</code> 文件。</p><p><img src="'+t+'" alt="踩坑笔记"></p><p>PS: <code>$INSTDIR</code>是一个 nsis 内置变量，表示安装目录。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>至此，小 C 通过 <code>crashReporter</code> 收集崩溃信息，并生成 .dmp 文件。通过 Visual Studio (C++ 编辑器) 打开 .dmp 文件，获取崩溃信息。通过 <code>MSVCP140.dll</code> 文件是 Visual C++ Redistributable Packages的一部分，需要下载并重装来修复该问题。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://www.electronjs.org/zh/docs/latest/api/command-line-switches#--enable-loggingfile" target="_blank" rel="noreferrer">https://www.electronjs.org/zh/docs/latest/api/command-line-switches#--enable-loggingfile</a></li><li><a href="https://www.electronjs.org/zh/docs/latest/api/crash-reporter#%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">https://www.electronjs.org/zh/docs/latest/api/crash-reporter#方法</a></li><li><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0msvcp/182ed95f-1178-4223-ad38-c18992caea57" target="_blank" rel="noreferrer">https://answers.microsoft.com/zh-hans/windows/forum/all/由于找不到msvcp/182ed95f-1178-4223-ad38-c18992caea57</a></li><li><a href="https://learn.microsoft.com/zh-cn/cpp/windows/latest-supported-vc-redist?view=msvc-170" target="_blank" rel="noreferrer">https://learn.microsoft.com/zh-cn/cpp/windows/latest-supported-vc-redist?view=msvc-170</a></li></ul>',64),d=[i];function E(h,y,u,m,b,g){return a(),e("div",null,d)}const w=s(c,[["render",E]]);export{v as __pageData,w as default};
