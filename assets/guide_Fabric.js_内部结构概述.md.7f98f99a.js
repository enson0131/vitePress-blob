import{_ as a,o as e,c as s,Q as t}from"./chunks/framework.b6910bb2.js";const r="/vitePress-blob/assets/1.1634239e.png",i="/vitePress-blob/assets/4.84143987.png",n="/vitePress-blob/assets/2.8e8014c3.png",l="/vitePress-blob/assets/5.5d843167.png",o="/vitePress-blob/assets/6.e9563edc.png",P=JSON.parse('{"title":"内部结构概述","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Fabric.js/内部结构概述.md","filePath":"guide/Fabric.js/内部结构概述.md","lastUpdated":1735569844000}'),c={name:"guide/Fabric.js/内部结构概述.md"},p=t('<h1 id="内部结构概述" tabindex="-1">内部结构概述 <a class="header-anchor" href="#内部结构概述" aria-label="Permalink to &quot;内部结构概述&quot;">​</a></h1><h2 id="使用场景上看" tabindex="-1">使用场景上看 <a class="header-anchor" href="#使用场景上看" aria-label="Permalink to &quot;使用场景上看&quot;">​</a></h2><p>从使用场景上看，Fabric.js 通过对象的形式来创建图形 （源码上也充满了面向对象设计的身影）</p><p>对于使用者而言，不需要关心底层 Canvas 是如何实现的，只需要关心如何创建这些图像对象即可。</p><h2 id="canvas-开发原理" tabindex="-1">Canvas 开发原理 <a class="header-anchor" href="#canvas-开发原理" aria-label="Permalink to &quot;Canvas 开发原理&quot;">​</a></h2><p>Fabric 底层是通过 Canvas 进行绘制的，因此需先简单了解下 Canvas 的开发原理。</p><p>Canvas 开发的本质其实很简单，可以想象下这种少儿画板：</p><p><img src="'+r+'" alt="初始状态图"></p><p>Canvas 的绘制其实就是在不断在画布上绘制图形，然后擦出的过程。</p><h2 id="fabric-js-源码解析" tabindex="-1">Fabric.js 源码解析 <a class="header-anchor" href="#fabric-js-源码解析" aria-label="Permalink to &quot;Fabric.js 源码解析&quot;">​</a></h2><h3 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h3><p>fabric.js 在初始化的时候会将你指定的 Canvas 元素（叫做 lowerCanvas）外面包裹上一 层 div 元素， 然后内部会插入另外一个上层的 Canvas 元素（叫做 upperCanvas），这两 个 Canvas 有如下区别</p><ul><li><p>upperCanvas 动态层Canvas，上层画布，只处理交互相关以及事件绑定</p></li><li><p>lowerCanvas 静态层Canvas，是用来绘制图形</p></li></ul><p><img src="'+i+'" alt="alt text"></p><h3 id="大体结构" tabindex="-1">大体结构 <a class="header-anchor" href="#大体结构" aria-label="Permalink to &quot;大体结构&quot;">​</a></h3><p>当我们引入 fabric.js 后，再控制台打印 fabric ，可以看到如下结构：</p><p><img src="'+n+'" alt="初始状态图"></p><p>可以看到，fabric 是一个对象，里面包含了多个属性，这些属性指向不同的模块。</p><p>Fabric的源码也是相当易读的，大部分情况下一个文件就代表一个模块，源码结构如下：</p><p><img src="'+l+'" alt="alt text"></p><h2 id="模块结构图" tabindex="-1">模块结构图 <a class="header-anchor" href="#模块结构图" aria-label="Permalink to &quot;模块结构图&quot;">​</a></h2><p>基于上述源码结构，可以很方便的绘制出 Fabric 的大概的一个模块结构图：</p><p><img src="'+o+'" alt="alt text"></p><p>至此，我们大致了解了 Fabric 的内部结构，接下来，我们将通过一个简单的例子，来了解下 Fabric 是如何绘制一个图形。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://keelii.com/2021/05/09/fabricjs-internals" target="_blank" rel="noreferrer">https://keelii.com/2021/05/09/fabricjs-internals</a></li><li><a href="https://juejin.cn/post/7100846911657082893" target="_blank" rel="noreferrer">https://juejin.cn/post/7100846911657082893</a></li></ul>',26),h=[p];function b(d,_,u,m,f,v){return e(),s("div",null,h)}const g=a(c,[["render",b]]);export{P as __pageData,g as default};
